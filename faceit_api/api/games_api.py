# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from faceit_api.api_client import ApiClient


class GamesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_all_games(self, **kwargs):  # noqa: E501
        """Retrieve details of all games on FACEIT  # noqa: E501

        Retrieve details of all games on FACEIT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_games(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: GamesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_games_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_games_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_games_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve details of all games on FACEIT  # noqa: E501

        Retrieve details of all games on FACEIT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_games_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: GamesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_games" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_all_games`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_all_games`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_all_games`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/games', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GamesList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_game(self, game_id, **kwargs):  # noqa: E501
        """Retrieve game details  # noqa: E501

        Retrieve game details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_game(game_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game_id: The id of the game (required)
        :return: Game
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_game_with_http_info(game_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_game_with_http_info(game_id, **kwargs)  # noqa: E501
            return data

    def get_game_with_http_info(self, game_id, **kwargs):  # noqa: E501
        """Retrieve game details  # noqa: E501

        Retrieve game details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_game_with_http_info(game_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game_id: The id of the game (required)
        :return: Game
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_game" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_id' is set
        if self.api_client.client_side_validation and ('game_id' not in params or
                                                       params['game_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `game_id` when calling `get_game`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_id' in params:
            path_params['game_id'] = params['game_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/games/{game_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Game',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_game_matchmakings(self, game_id, **kwargs):  # noqa: E501
        """Retrieve details of all matchmakings of a game on FACEIT  # noqa: E501

        Retrieve details of all matchmakings of a game on FACEIT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_game_matchmakings(game_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game_id: The id of the game (required)
        :param str region: The region of the matchmakings
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: MatchmakingList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_game_matchmakings_with_http_info(game_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_game_matchmakings_with_http_info(game_id, **kwargs)  # noqa: E501
            return data

    def get_game_matchmakings_with_http_info(self, game_id, **kwargs):  # noqa: E501
        """Retrieve details of all matchmakings of a game on FACEIT  # noqa: E501

        Retrieve details of all matchmakings of a game on FACEIT  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_game_matchmakings_with_http_info(game_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game_id: The id of the game (required)
        :param str region: The region of the matchmakings
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: MatchmakingList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_id', 'region', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_game_matchmakings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_id' is set
        if self.api_client.client_side_validation and ('game_id' not in params or
                                                       params['game_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `game_id` when calling `get_game_matchmakings`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_game_matchmakings`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_game_matchmakings`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_game_matchmakings`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'game_id' in params:
            path_params['game_id'] = params['game_id']  # noqa: E501

        query_params = []
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/games/{gameId}/matchmakings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MatchmakingList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_parent_game(self, game_id, **kwargs):  # noqa: E501
        """Retrieve the details of the parent game, if the game is region-specific  # noqa: E501

        Retrieve the details of the parent game, if the game is region-specific  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parent_game(game_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game_id: The id of the game (required)
        :return: Game
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_parent_game_with_http_info(game_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_parent_game_with_http_info(game_id, **kwargs)  # noqa: E501
            return data

    def get_parent_game_with_http_info(self, game_id, **kwargs):  # noqa: E501
        """Retrieve the details of the parent game, if the game is region-specific  # noqa: E501

        Retrieve the details of the parent game, if the game is region-specific  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_parent_game_with_http_info(game_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game_id: The id of the game (required)
        :return: Game
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parent_game" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_id' is set
        if self.api_client.client_side_validation and ('game_id' not in params or
                                                       params['game_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `game_id` when calling `get_parent_game`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_id' in params:
            path_params['game_id'] = params['game_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/games/{game_id}/parent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Game',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_queue_bans(self, game_id, queue_id, **kwargs):  # noqa: E501
        """Retrieve queue bans on FACEIT  # noqa: E501

        Retrieve queue bans on FACEIT. Available only for game or queue owners(organizers)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_queue_bans(game_id, queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game_id: The id of the game (required)
        :param str queue_id: The id of the queue (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: QueueBansList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_queue_bans_with_http_info(game_id, queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_queue_bans_with_http_info(game_id, queue_id, **kwargs)  # noqa: E501
            return data

    def get_queue_bans_with_http_info(self, game_id, queue_id, **kwargs):  # noqa: E501
        """Retrieve queue bans on FACEIT  # noqa: E501

        Retrieve queue bans on FACEIT. Available only for game or queue owners(organizers)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_queue_bans_with_http_info(game_id, queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game_id: The id of the game (required)
        :param str queue_id: The id of the queue (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: QueueBansList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_id', 'queue_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_queue_bans" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_id' is set
        if self.api_client.client_side_validation and ('game_id' not in params or
                                                       params['game_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `game_id` when calling `get_queue_bans`")  # noqa: E501
        # verify the required parameter 'queue_id' is set
        if self.api_client.client_side_validation and ('queue_id' not in params or
                                                       params['queue_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `queue_id` when calling `get_queue_bans`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_queue_bans`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_queue_bans`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_queue_bans`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'game_id' in params:
            path_params['game_id'] = params['game_id']  # noqa: E501
        if 'queue_id' in params:
            path_params['queue_id'] = params['queue_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/games/{game_id}/queues/{queue_id}/bans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueueBansList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_queue_by_id(self, game_id, queue_id, **kwargs):  # noqa: E501
        """Retrieve details of a queue on FACEIT  # noqa: E501

        Retrieve details of a queue on FACEIT. Available only for game or queue owners(organizers)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_queue_by_id(game_id, queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game_id: The id of the game (required)
        :param str queue_id: The id of the queue (required)
        :return: Queue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_queue_by_id_with_http_info(game_id, queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_queue_by_id_with_http_info(game_id, queue_id, **kwargs)  # noqa: E501
            return data

    def get_queue_by_id_with_http_info(self, game_id, queue_id, **kwargs):  # noqa: E501
        """Retrieve details of a queue on FACEIT  # noqa: E501

        Retrieve details of a queue on FACEIT. Available only for game or queue owners(organizers)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_queue_by_id_with_http_info(game_id, queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game_id: The id of the game (required)
        :param str queue_id: The id of the queue (required)
        :return: Queue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_id', 'queue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_queue_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_id' is set
        if self.api_client.client_side_validation and ('game_id' not in params or
                                                       params['game_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `game_id` when calling `get_queue_by_id`")  # noqa: E501
        # verify the required parameter 'queue_id' is set
        if self.api_client.client_side_validation and ('queue_id' not in params or
                                                       params['queue_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `queue_id` when calling `get_queue_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'game_id' in params:
            path_params['game_id'] = params['game_id']  # noqa: E501
        if 'queue_id' in params:
            path_params['queue_id'] = params['queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/games/{game_id}/queues/{queue_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Queue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_queues_by_entity_filters(self, game_id, entity_type, entity_id, **kwargs):  # noqa: E501
        """Retrieve queues by filters on FACEIT  # noqa: E501

        Retrieve queues by filters on FACEIT. Available only for game developers and queue owners(organizers)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_queues_by_entity_filters(game_id, entity_type, entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game_id: The id of the game (required)
        :param str entity_type: The type of the entity (required)
        :param str entity_id: The id of the entity (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: QueuesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_queues_by_entity_filters_with_http_info(game_id, entity_type, entity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_queues_by_entity_filters_with_http_info(game_id, entity_type, entity_id, **kwargs)  # noqa: E501
            return data

    def get_queues_by_entity_filters_with_http_info(self, game_id, entity_type, entity_id, **kwargs):  # noqa: E501
        """Retrieve queues by filters on FACEIT  # noqa: E501

        Retrieve queues by filters on FACEIT. Available only for game developers and queue owners(organizers)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_queues_by_entity_filters_with_http_info(game_id, entity_type, entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game_id: The id of the game (required)
        :param str entity_type: The type of the entity (required)
        :param str entity_id: The id of the entity (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: QueuesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_id', 'entity_type', 'entity_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_queues_by_entity_filters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_id' is set
        if self.api_client.client_side_validation and ('game_id' not in params or
                                                       params['game_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `game_id` when calling `get_queues_by_entity_filters`")  # noqa: E501
        # verify the required parameter 'entity_type' is set
        if self.api_client.client_side_validation and ('entity_type' not in params or
                                                       params['entity_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `entity_type` when calling `get_queues_by_entity_filters`")  # noqa: E501
        # verify the required parameter 'entity_id' is set
        if self.api_client.client_side_validation and ('entity_id' not in params or
                                                       params['entity_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `entity_id` when calling `get_queues_by_entity_filters`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_queues_by_entity_filters`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 20):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_queues_by_entity_filters`, must be a value less than or equal to `20`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_queues_by_entity_filters`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'game_id' in params:
            path_params['game_id'] = params['game_id']  # noqa: E501

        query_params = []
        if 'entity_type' in params:
            query_params.append(('entity_type', params['entity_type']))  # noqa: E501
        if 'entity_id' in params:
            query_params.append(('entity_id', params['entity_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/games/{game_id}/queues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueuesList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_queues_by_region(self, game_id, region_id, **kwargs):  # noqa: E501
        """Retrieve queues by region on FACEIT  # noqa: E501

        Retrieve queues by region on FACEIT. Available only for game developers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_queues_by_region(game_id, region_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game_id: The id of the game (required)
        :param str region_id: The id of the region (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: QueuesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_queues_by_region_with_http_info(game_id, region_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_queues_by_region_with_http_info(game_id, region_id, **kwargs)  # noqa: E501
            return data

    def get_queues_by_region_with_http_info(self, game_id, region_id, **kwargs):  # noqa: E501
        """Retrieve queues by region on FACEIT  # noqa: E501

        Retrieve queues by region on FACEIT. Available only for game developers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_queues_by_region_with_http_info(game_id, region_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game_id: The id of the game (required)
        :param str region_id: The id of the region (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: QueuesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game_id', 'region_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_queues_by_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'game_id' is set
        if self.api_client.client_side_validation and ('game_id' not in params or
                                                       params['game_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `game_id` when calling `get_queues_by_region`")  # noqa: E501
        # verify the required parameter 'region_id' is set
        if self.api_client.client_side_validation and ('region_id' not in params or
                                                       params['region_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `region_id` when calling `get_queues_by_region`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_queues_by_region`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 20):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_queues_by_region`, must be a value less than or equal to `20`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_queues_by_region`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'game_id' in params:
            path_params['game_id'] = params['game_id']  # noqa: E501
        if 'region_id' in params:
            path_params['region_id'] = params['region_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/games/{game_id}/regions/{region_id}/queues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueuesList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
