# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from faceit_api.api_client import ApiClient


class LeaderboardsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_championship_group_ranking(self, championship_id, group, **kwargs):  # noqa: E501
        """Retrieve group ranking of a championship  # noqa: E501

        Retrieve group ranking of a championship  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_championship_group_ranking(championship_id, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str championship_id: The id of the championship (required)
        :param int group: A group of the championship (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: EntityRanking
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_championship_group_ranking_with_http_info(championship_id, group, **kwargs)  # noqa: E501
        else:
            (data) = self.get_championship_group_ranking_with_http_info(championship_id, group, **kwargs)  # noqa: E501
            return data

    def get_championship_group_ranking_with_http_info(self, championship_id, group, **kwargs):  # noqa: E501
        """Retrieve group ranking of a championship  # noqa: E501

        Retrieve group ranking of a championship  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_championship_group_ranking_with_http_info(championship_id, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str championship_id: The id of the championship (required)
        :param int group: A group of the championship (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: EntityRanking
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['championship_id', 'group', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_championship_group_ranking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'championship_id' is set
        if self.api_client.client_side_validation and ('championship_id' not in params or
                                                       params['championship_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `championship_id` when calling `get_championship_group_ranking`")  # noqa: E501
        # verify the required parameter 'group' is set
        if self.api_client.client_side_validation and ('group' not in params or
                                                       params['group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group` when calling `get_championship_group_ranking`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_championship_group_ranking`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_championship_group_ranking`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_championship_group_ranking`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'championship_id' in params:
            path_params['championship_id'] = params['championship_id']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/leaderboards/championships/{championship_id}/groups/{group}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityRanking',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_championship_leaderboards(self, championship_id, **kwargs):  # noqa: E501
        """Retrieve all leaderboards of a championship  # noqa: E501

        Retrieve all leaderboards of a championship  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_championship_leaderboards(championship_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str championship_id: The id of the championship (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: LeaderboardsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_championship_leaderboards_with_http_info(championship_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_championship_leaderboards_with_http_info(championship_id, **kwargs)  # noqa: E501
            return data

    def get_championship_leaderboards_with_http_info(self, championship_id, **kwargs):  # noqa: E501
        """Retrieve all leaderboards of a championship  # noqa: E501

        Retrieve all leaderboards of a championship  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_championship_leaderboards_with_http_info(championship_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str championship_id: The id of the championship (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: LeaderboardsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['championship_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_championship_leaderboards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'championship_id' is set
        if self.api_client.client_side_validation and ('championship_id' not in params or
                                                       params['championship_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `championship_id` when calling `get_championship_leaderboards`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_championship_leaderboards`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_championship_leaderboards`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_championship_leaderboards`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'championship_id' in params:
            path_params['championship_id'] = params['championship_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/leaderboards/championships/{championship_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeaderboardsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_hub_leaderboards(self, hub_id, **kwargs):  # noqa: E501
        """Retrieve all leaderboards of a hub  # noqa: E501

        Retrieve all leaderboards of a hub  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hub_leaderboards(hub_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hub_id: The id of the hub (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: LeaderboardsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_hub_leaderboards_with_http_info(hub_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_hub_leaderboards_with_http_info(hub_id, **kwargs)  # noqa: E501
            return data

    def get_hub_leaderboards_with_http_info(self, hub_id, **kwargs):  # noqa: E501
        """Retrieve all leaderboards of a hub  # noqa: E501

        Retrieve all leaderboards of a hub  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hub_leaderboards_with_http_info(hub_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hub_id: The id of the hub (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: LeaderboardsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hub_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hub_leaderboards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hub_id' is set
        if self.api_client.client_side_validation and ('hub_id' not in params or
                                                       params['hub_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `hub_id` when calling `get_hub_leaderboards`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_hub_leaderboards`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_hub_leaderboards`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_hub_leaderboards`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'hub_id' in params:
            path_params['hub_id'] = params['hub_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/leaderboards/hubs/{hub_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeaderboardsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_hub_ranking(self, hub_id, **kwargs):  # noqa: E501
        """Retrieve all time ranking of a hub  # noqa: E501

        Retrieve all time ranking of a hub  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hub_ranking(hub_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hub_id: The id of the hub (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: EntityRanking
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_hub_ranking_with_http_info(hub_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_hub_ranking_with_http_info(hub_id, **kwargs)  # noqa: E501
            return data

    def get_hub_ranking_with_http_info(self, hub_id, **kwargs):  # noqa: E501
        """Retrieve all time ranking of a hub  # noqa: E501

        Retrieve all time ranking of a hub  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hub_ranking_with_http_info(hub_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hub_id: The id of the hub (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: EntityRanking
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hub_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hub_ranking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hub_id' is set
        if self.api_client.client_side_validation and ('hub_id' not in params or
                                                       params['hub_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `hub_id` when calling `get_hub_ranking`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_hub_ranking`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_hub_ranking`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_hub_ranking`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'hub_id' in params:
            path_params['hub_id'] = params['hub_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/leaderboards/hubs/{hub_id}/general', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityRanking',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_hub_season_ranking(self, hub_id, season, **kwargs):  # noqa: E501
        """Retrieve seasonal ranking of a hub  # noqa: E501

        Retrieve seasonal ranking of a hub  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hub_season_ranking(hub_id, season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hub_id: The id of the hub (required)
        :param int season: A season of the hub (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: EntityRanking
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_hub_season_ranking_with_http_info(hub_id, season, **kwargs)  # noqa: E501
        else:
            (data) = self.get_hub_season_ranking_with_http_info(hub_id, season, **kwargs)  # noqa: E501
            return data

    def get_hub_season_ranking_with_http_info(self, hub_id, season, **kwargs):  # noqa: E501
        """Retrieve seasonal ranking of a hub  # noqa: E501

        Retrieve seasonal ranking of a hub  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hub_season_ranking_with_http_info(hub_id, season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hub_id: The id of the hub (required)
        :param int season: A season of the hub (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: EntityRanking
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hub_id', 'season', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hub_season_ranking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hub_id' is set
        if self.api_client.client_side_validation and ('hub_id' not in params or
                                                       params['hub_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `hub_id` when calling `get_hub_season_ranking`")  # noqa: E501
        # verify the required parameter 'season' is set
        if self.api_client.client_side_validation and ('season' not in params or
                                                       params['season'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `season` when calling `get_hub_season_ranking`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_hub_season_ranking`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_hub_season_ranking`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_hub_season_ranking`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'hub_id' in params:
            path_params['hub_id'] = params['hub_id']  # noqa: E501
        if 'season' in params:
            path_params['season'] = params['season']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/leaderboards/hubs/{hub_id}/seasons/{season}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityRanking',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_leaderboard(self, leaderboard_id, **kwargs):  # noqa: E501
        """Retrieve ranking from a leaderboard id  # noqa: E501

        Retrieve ranking from a leaderboard id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leaderboard(leaderboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str leaderboard_id: The id of the leaderboard (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: EntityRanking
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_leaderboard_with_http_info(leaderboard_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_leaderboard_with_http_info(leaderboard_id, **kwargs)  # noqa: E501
            return data

    def get_leaderboard_with_http_info(self, leaderboard_id, **kwargs):  # noqa: E501
        """Retrieve ranking from a leaderboard id  # noqa: E501

        Retrieve ranking from a leaderboard id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leaderboard_with_http_info(leaderboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str leaderboard_id: The id of the leaderboard (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: EntityRanking
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['leaderboard_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_leaderboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'leaderboard_id' is set
        if self.api_client.client_side_validation and ('leaderboard_id' not in params or
                                                       params['leaderboard_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `leaderboard_id` when calling `get_leaderboard`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_leaderboard`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_leaderboard`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_leaderboard`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'leaderboard_id' in params:
            path_params['leaderboard_id'] = params['leaderboard_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/leaderboards/{leaderboard_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityRanking',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_player_ranking_in_leaderboard(self, leaderboard_id, player_id, **kwargs):  # noqa: E501
        """Retrieve a players ranking in a leaderboard  # noqa: E501

        Retrieve a players ranking in a leaderboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_player_ranking_in_leaderboard(leaderboard_id, player_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str leaderboard_id: The id of the leaderboard (required)
        :param str player_id: The id of the player (required)
        :return: Ranking
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_player_ranking_in_leaderboard_with_http_info(leaderboard_id, player_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_player_ranking_in_leaderboard_with_http_info(leaderboard_id, player_id, **kwargs)  # noqa: E501
            return data

    def get_player_ranking_in_leaderboard_with_http_info(self, leaderboard_id, player_id, **kwargs):  # noqa: E501
        """Retrieve a players ranking in a leaderboard  # noqa: E501

        Retrieve a players ranking in a leaderboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_player_ranking_in_leaderboard_with_http_info(leaderboard_id, player_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str leaderboard_id: The id of the leaderboard (required)
        :param str player_id: The id of the player (required)
        :return: Ranking
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['leaderboard_id', 'player_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_player_ranking_in_leaderboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'leaderboard_id' is set
        if self.api_client.client_side_validation and ('leaderboard_id' not in params or
                                                       params['leaderboard_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `leaderboard_id` when calling `get_player_ranking_in_leaderboard`")  # noqa: E501
        # verify the required parameter 'player_id' is set
        if self.api_client.client_side_validation and ('player_id' not in params or
                                                       params['player_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `player_id` when calling `get_player_ranking_in_leaderboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'leaderboard_id' in params:
            path_params['leaderboard_id'] = params['leaderboard_id']  # noqa: E501
        if 'player_id' in params:
            path_params['player_id'] = params['player_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/leaderboards/{leaderboard_id}/players/{player_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ranking',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
