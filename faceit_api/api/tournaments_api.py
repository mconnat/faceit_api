# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from faceit_api.api_client import ApiClient


class TournamentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_tournament(self, tournament_id, **kwargs):  # noqa: E501
        """Retrieve tournament details  # noqa: E501

        Retrieve tournament details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tournament(tournament_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tournament_id: The id of the tournament (required)
        :param list[str] expanded: List of entity names to expand in request
        :return: Tournament
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tournament_with_http_info(tournament_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tournament_with_http_info(tournament_id, **kwargs)  # noqa: E501
            return data

    def get_tournament_with_http_info(self, tournament_id, **kwargs):  # noqa: E501
        """Retrieve tournament details  # noqa: E501

        Retrieve tournament details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tournament_with_http_info(tournament_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tournament_id: The id of the tournament (required)
        :param list[str] expanded: List of entity names to expand in request
        :return: Tournament
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tournament_id', 'expanded']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tournament" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tournament_id' is set
        if self.api_client.client_side_validation and ('tournament_id' not in params or
                                                       params['tournament_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tournament_id` when calling `get_tournament`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tournament_id' in params:
            path_params['tournament_id'] = params['tournament_id']  # noqa: E501

        query_params = []
        if 'expanded' in params:
            query_params.append(('expanded', params['expanded']))  # noqa: E501
            collection_formats['expanded'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/tournaments/{tournament_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tournament',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tournament_brackets(self, tournament_id, **kwargs):  # noqa: E501
        """Retrieve brackets of a tournament  # noqa: E501

        Retrieve brackets of a tournament  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tournament_brackets(tournament_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tournament_id: The id of the tournament (required)
        :return: Brackets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tournament_brackets_with_http_info(tournament_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tournament_brackets_with_http_info(tournament_id, **kwargs)  # noqa: E501
            return data

    def get_tournament_brackets_with_http_info(self, tournament_id, **kwargs):  # noqa: E501
        """Retrieve brackets of a tournament  # noqa: E501

        Retrieve brackets of a tournament  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tournament_brackets_with_http_info(tournament_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tournament_id: The id of the tournament (required)
        :return: Brackets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tournament_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tournament_brackets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tournament_id' is set
        if self.api_client.client_side_validation and ('tournament_id' not in params or
                                                       params['tournament_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tournament_id` when calling `get_tournament_brackets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tournament_id' in params:
            path_params['tournament_id'] = params['tournament_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/tournaments/{tournament_id}/brackets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Brackets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tournament_matches(self, tournament_id, **kwargs):  # noqa: E501
        """Retrieve all matches of a tournament  # noqa: E501

        Retrieve all matches of a tournament  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tournament_matches(tournament_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tournament_id: The id of the tournament (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: MatchList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tournament_matches_with_http_info(tournament_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tournament_matches_with_http_info(tournament_id, **kwargs)  # noqa: E501
            return data

    def get_tournament_matches_with_http_info(self, tournament_id, **kwargs):  # noqa: E501
        """Retrieve all matches of a tournament  # noqa: E501

        Retrieve all matches of a tournament  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tournament_matches_with_http_info(tournament_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tournament_id: The id of the tournament (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: MatchList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tournament_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tournament_matches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tournament_id' is set
        if self.api_client.client_side_validation and ('tournament_id' not in params or
                                                       params['tournament_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tournament_id` when calling `get_tournament_matches`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_tournament_matches`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_tournament_matches`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_tournament_matches`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'tournament_id' in params:
            path_params['tournament_id'] = params['tournament_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/tournaments/{tournament_id}/matches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MatchList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tournament_teams(self, tournament_id, **kwargs):  # noqa: E501
        """Retrieve all teams of a tournament  # noqa: E501

        Retrieve all teams of a tournament  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tournament_teams(tournament_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tournament_id: The id of the tournament (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: TournamentTeams
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tournament_teams_with_http_info(tournament_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tournament_teams_with_http_info(tournament_id, **kwargs)  # noqa: E501
            return data

    def get_tournament_teams_with_http_info(self, tournament_id, **kwargs):  # noqa: E501
        """Retrieve all teams of a tournament  # noqa: E501

        Retrieve all teams of a tournament  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tournament_teams_with_http_info(tournament_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tournament_id: The id of the tournament (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: TournamentTeams
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tournament_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tournament_teams" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tournament_id' is set
        if self.api_client.client_side_validation and ('tournament_id' not in params or
                                                       params['tournament_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tournament_id` when calling `get_tournament_teams`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_tournament_teams`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_tournament_teams`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_tournament_teams`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'tournament_id' in params:
            path_params['tournament_id'] = params['tournament_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/tournaments/{tournament_id}/teams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TournamentTeams',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tournaments_list(self, **kwargs):  # noqa: E501
        """Retrieve tournaments v1 (no longer used)  # noqa: E501

        Retrieve tournaments v1 (no longer used). Please refer to the Championships controller to retrieve tournaments v2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tournaments_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game: A game on FACEIT
        :param str region: A region of the game
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: TournamentsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tournaments_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_tournaments_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_tournaments_list_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve tournaments v1 (no longer used)  # noqa: E501

        Retrieve tournaments v1 (no longer used). Please refer to the Championships controller to retrieve tournaments v2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tournaments_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str game: A game on FACEIT
        :param str region: A region of the game
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: TournamentsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['game', 'region', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tournaments_list" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_tournaments_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_tournaments_list`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_tournaments_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'game' in params:
            query_params.append(('game', params['game']))  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/tournaments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TournamentsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
