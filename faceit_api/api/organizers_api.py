# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from faceit_api.api_client import ApiClient


class OrganizersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_organizer(self, organizer_id, **kwargs):  # noqa: E501
        """Retrieve organizer details  # noqa: E501

        Retrieve organizer details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizer(organizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organizer_id: The id of the organizer (required)
        :return: Organizer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizer_with_http_info(organizer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizer_with_http_info(organizer_id, **kwargs)  # noqa: E501
            return data

    def get_organizer_with_http_info(self, organizer_id, **kwargs):  # noqa: E501
        """Retrieve organizer details  # noqa: E501

        Retrieve organizer details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizer_with_http_info(organizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organizer_id: The id of the organizer (required)
        :return: Organizer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organizer_id' is set
        if self.api_client.client_side_validation and ('organizer_id' not in params or
                                                       params['organizer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organizer_id` when calling `get_organizer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organizer_id' in params:
            path_params['organizer_id'] = params['organizer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/organizers/{organizer_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organizer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizer_by_name(self, name, **kwargs):  # noqa: E501
        """Retrieve organizer details from name  # noqa: E501

        Retrieve organizer details from name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizer_by_name(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the organizer (required)
        :return: Organizer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizer_by_name_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizer_by_name_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_organizer_by_name_with_http_info(self, name, **kwargs):  # noqa: E501
        """Retrieve organizer details from name  # noqa: E501

        Retrieve organizer details from name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizer_by_name_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the organizer (required)
        :return: Organizer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizer_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `get_organizer_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/organizers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organizer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizer_championships(self, organizer_id, **kwargs):  # noqa: E501
        """Retrieve all championships of an organizer  # noqa: E501

        Retrieve all championships of an organizer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizer_championships(organizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organizer_id: The id of the organizer (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: ChampionshipsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizer_championships_with_http_info(organizer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizer_championships_with_http_info(organizer_id, **kwargs)  # noqa: E501
            return data

    def get_organizer_championships_with_http_info(self, organizer_id, **kwargs):  # noqa: E501
        """Retrieve all championships of an organizer  # noqa: E501

        Retrieve all championships of an organizer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizer_championships_with_http_info(organizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organizer_id: The id of the organizer (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: ChampionshipsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizer_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizer_championships" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organizer_id' is set
        if self.api_client.client_side_validation and ('organizer_id' not in params or
                                                       params['organizer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organizer_id` when calling `get_organizer_championships`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_organizer_championships`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_organizer_championships`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_organizer_championships`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organizer_id' in params:
            path_params['organizer_id'] = params['organizer_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/organizers/{organizer_id}/championships', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChampionshipsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizer_games(self, organizer_id, **kwargs):  # noqa: E501
        """Retrieve all games an organizer is involved with  # noqa: E501

        Retrieve all games an organizer is involved with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizer_games(organizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organizer_id: The id of the organizer (required)
        :return: GamesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizer_games_with_http_info(organizer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizer_games_with_http_info(organizer_id, **kwargs)  # noqa: E501
            return data

    def get_organizer_games_with_http_info(self, organizer_id, **kwargs):  # noqa: E501
        """Retrieve all games an organizer is involved with  # noqa: E501

        Retrieve all games an organizer is involved with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizer_games_with_http_info(organizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organizer_id: The id of the organizer (required)
        :return: GamesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizer_games" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organizer_id' is set
        if self.api_client.client_side_validation and ('organizer_id' not in params or
                                                       params['organizer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organizer_id` when calling `get_organizer_games`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organizer_id' in params:
            path_params['organizer_id'] = params['organizer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/organizers/{organizer_id}/games', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GamesList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizer_hubs(self, organizer_id, **kwargs):  # noqa: E501
        """Retrieve all hubs of an organizer  # noqa: E501

        Retrieve all hubs of an organizer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizer_hubs(organizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organizer_id: The id of the organizer (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: HubsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizer_hubs_with_http_info(organizer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizer_hubs_with_http_info(organizer_id, **kwargs)  # noqa: E501
            return data

    def get_organizer_hubs_with_http_info(self, organizer_id, **kwargs):  # noqa: E501
        """Retrieve all hubs of an organizer  # noqa: E501

        Retrieve all hubs of an organizer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizer_hubs_with_http_info(organizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organizer_id: The id of the organizer (required)
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: HubsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizer_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizer_hubs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organizer_id' is set
        if self.api_client.client_side_validation and ('organizer_id' not in params or
                                                       params['organizer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organizer_id` when calling `get_organizer_hubs`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 1000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_organizer_hubs`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_organizer_hubs`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 50):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_organizer_hubs`, must be a value less than or equal to `50`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_organizer_hubs`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organizer_id' in params:
            path_params['organizer_id'] = params['organizer_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/organizers/{organizer_id}/hubs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HubsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizer_tournaments(self, organizer_id, **kwargs):  # noqa: E501
        """Retrieve all tournaments of an organizer  # noqa: E501

        Retrieve all tournaments of an organizer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizer_tournaments(organizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organizer_id: The id of the organizer (required)
        :param str type: Kind of tournament. Can be upcoming(default) or past
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: TournamentsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizer_tournaments_with_http_info(organizer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizer_tournaments_with_http_info(organizer_id, **kwargs)  # noqa: E501
            return data

    def get_organizer_tournaments_with_http_info(self, organizer_id, **kwargs):  # noqa: E501
        """Retrieve all tournaments of an organizer  # noqa: E501

        Retrieve all tournaments of an organizer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizer_tournaments_with_http_info(organizer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organizer_id: The id of the organizer (required)
        :param str type: Kind of tournament. Can be upcoming(default) or past
        :param int offset: The starting item position
        :param int limit: The number of items to return
        :return: TournamentsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizer_id', 'type', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizer_tournaments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organizer_id' is set
        if self.api_client.client_side_validation and ('organizer_id' not in params or
                                                       params['organizer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organizer_id` when calling `get_organizer_tournaments`")  # noqa: E501

        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_organizer_tournaments`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] > 100):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_organizer_tournaments`, must be a value less than or equal to `100`")  # noqa: E501
        if self.api_client.client_side_validation and ('limit' in params and params['limit'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_organizer_tournaments`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'organizer_id' in params:
            path_params['organizer_id'] = params['organizer_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['key']  # noqa: E501

        return self.api_client.call_api(
            '/organizers/{organizer_id}/tournaments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TournamentsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
