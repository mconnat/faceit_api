# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Stats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rating': 'int',
        'skill_level': 'StatsSkillLevel',
        'win_probability': 'float'
    }

    attribute_map = {
        'rating': 'rating',
        'skill_level': 'skillLevel',
        'win_probability': 'winProbability'
    }

    def __init__(self, rating=None, skill_level=None, win_probability=None, _configuration=None):  # noqa: E501
        """Stats - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._rating = None
        self._skill_level = None
        self._win_probability = None
        self.discriminator = None

        if rating is not None:
            self.rating = rating
        if skill_level is not None:
            self.skill_level = skill_level
        if win_probability is not None:
            self.win_probability = win_probability

    @property
    def rating(self):
        """Gets the rating of this Stats.  # noqa: E501


        :return: The rating of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Stats.


        :param rating: The rating of this Stats.  # noqa: E501
        :type: int
        """

        self._rating = rating

    @property
    def skill_level(self):
        """Gets the skill_level of this Stats.  # noqa: E501


        :return: The skill_level of this Stats.  # noqa: E501
        :rtype: StatsSkillLevel
        """
        return self._skill_level

    @skill_level.setter
    def skill_level(self, skill_level):
        """Sets the skill_level of this Stats.


        :param skill_level: The skill_level of this Stats.  # noqa: E501
        :type: StatsSkillLevel
        """

        self._skill_level = skill_level

    @property
    def win_probability(self):
        """Gets the win_probability of this Stats.  # noqa: E501


        :return: The win_probability of this Stats.  # noqa: E501
        :rtype: float
        """
        return self._win_probability

    @win_probability.setter
    def win_probability(self, win_probability):
        """Sets the win_probability of this Stats.


        :param win_probability: The win_probability of this Stats.  # noqa: E501
        :type: float
        """

        self._win_probability = win_probability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Stats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Stats):
            return True

        return self.to_dict() != other.to_dict()
