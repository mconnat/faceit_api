# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Season(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date': 'datetime',
        'number': 'int',
        'placement_match_count': 'int',
        'start_date': 'datetime'
    }

    attribute_map = {
        'end_date': 'end_date',
        'number': 'number',
        'placement_match_count': 'placement_match_count',
        'start_date': 'start_date'
    }

    def __init__(self, end_date=None, number=None, placement_match_count=None, start_date=None, _configuration=None):  # noqa: E501
        """Season - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._end_date = None
        self._number = None
        self._placement_match_count = None
        self._start_date = None
        self.discriminator = None

        if end_date is not None:
            self.end_date = end_date
        if number is not None:
            self.number = number
        if placement_match_count is not None:
            self.placement_match_count = placement_match_count
        if start_date is not None:
            self.start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Season.  # noqa: E501

        The end date of the season.  # noqa: E501

        :return: The end_date of this Season.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Season.

        The end date of the season.  # noqa: E501

        :param end_date: The end_date of this Season.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def number(self):
        """Gets the number of this Season.  # noqa: E501

        The season number.  # noqa: E501

        :return: The number of this Season.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Season.

        The season number.  # noqa: E501

        :param number: The number of this Season.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def placement_match_count(self):
        """Gets the placement_match_count of this Season.  # noqa: E501

        The placement match mount.  # noqa: E501

        :return: The placement_match_count of this Season.  # noqa: E501
        :rtype: int
        """
        return self._placement_match_count

    @placement_match_count.setter
    def placement_match_count(self, placement_match_count):
        """Sets the placement_match_count of this Season.

        The placement match mount.  # noqa: E501

        :param placement_match_count: The placement_match_count of this Season.  # noqa: E501
        :type: int
        """

        self._placement_match_count = placement_match_count

    @property
    def start_date(self):
        """Gets the start_date of this Season.  # noqa: E501

        The start date of the season.  # noqa: E501

        :return: The start_date of this Season.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Season.

        The start date of the season.  # noqa: E501

        :param start_date: The start_date of this Season.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Season, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Season):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Season):
            return True

        return self.to_dict() != other.to_dict()
