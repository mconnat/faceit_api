# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Summary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'containers': 'int',
        'created': 'int',
        'id': 'str',
        'labels': 'dict(str, str)',
        'parent_id': 'str',
        'repo_digests': 'list[str]',
        'repo_tags': 'list[str]',
        'shared_size': 'int',
        'size': 'int',
        'virtual_size': 'int'
    }

    attribute_map = {
        'containers': 'Containers',
        'created': 'Created',
        'id': 'Id',
        'labels': 'Labels',
        'parent_id': 'ParentId',
        'repo_digests': 'RepoDigests',
        'repo_tags': 'RepoTags',
        'shared_size': 'SharedSize',
        'size': 'Size',
        'virtual_size': 'VirtualSize'
    }

    def __init__(self, containers=None, created=None, id=None, labels=None, parent_id=None, repo_digests=None, repo_tags=None, shared_size=None, size=None, virtual_size=None, _configuration=None):  # noqa: E501
        """Summary - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._containers = None
        self._created = None
        self._id = None
        self._labels = None
        self._parent_id = None
        self._repo_digests = None
        self._repo_tags = None
        self._shared_size = None
        self._size = None
        self._virtual_size = None
        self.discriminator = None

        self.containers = containers
        self.created = created
        self.id = id
        self.labels = labels
        self.parent_id = parent_id
        self.repo_digests = repo_digests
        self.repo_tags = repo_tags
        self.shared_size = shared_size
        self.size = size
        if virtual_size is not None:
            self.virtual_size = virtual_size

    @property
    def containers(self):
        """Gets the containers of this Summary.  # noqa: E501

        Number of containers using this image. Includes both stopped and running containers.  This size is not calculated by default, and depends on which API endpoint is used. `-1` indicates that the value has not been set / calculated.  # noqa: E501

        :return: The containers of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this Summary.

        Number of containers using this image. Includes both stopped and running containers.  This size is not calculated by default, and depends on which API endpoint is used. `-1` indicates that the value has not been set / calculated.  # noqa: E501

        :param containers: The containers of this Summary.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and containers is None:
            raise ValueError("Invalid value for `containers`, must not be `None`")  # noqa: E501

        self._containers = containers

    @property
    def created(self):
        """Gets the created of this Summary.  # noqa: E501

        Date and time at which the image was created as a Unix timestamp (number of seconds sinds EPOCH).  # noqa: E501

        :return: The created of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Summary.

        Date and time at which the image was created as a Unix timestamp (number of seconds sinds EPOCH).  # noqa: E501

        :param created: The created of this Summary.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def id(self):
        """Gets the id of this Summary.  # noqa: E501

        ID is the content-addressable ID of an image.  This identifier is a content-addressable digest calculated from the image's configuration (which includes the digests of layers used by the image).  Note that this digest differs from the `RepoDigests` below, which holds digests of image manifests that reference the image.  # noqa: E501

        :return: The id of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Summary.

        ID is the content-addressable ID of an image.  This identifier is a content-addressable digest calculated from the image's configuration (which includes the digests of layers used by the image).  Note that this digest differs from the `RepoDigests` below, which holds digests of image manifests that reference the image.  # noqa: E501

        :param id: The id of this Summary.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this Summary.  # noqa: E501

        User-defined key/value metadata.  # noqa: E501

        :return: The labels of this Summary.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Summary.

        User-defined key/value metadata.  # noqa: E501

        :param labels: The labels of this Summary.  # noqa: E501
        :type: dict(str, str)
        """
        if self._configuration.client_side_validation and labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def parent_id(self):
        """Gets the parent_id of this Summary.  # noqa: E501

        ID of the parent image.  Depending on how the image was created, this field may be empty and is only set for images that were built/created locally. This field is empty if the image was pulled from an image registry.  # noqa: E501

        :return: The parent_id of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Summary.

        ID of the parent image.  Depending on how the image was created, this field may be empty and is only set for images that were built/created locally. This field is empty if the image was pulled from an image registry.  # noqa: E501

        :param parent_id: The parent_id of this Summary.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")  # noqa: E501

        self._parent_id = parent_id

    @property
    def repo_digests(self):
        """Gets the repo_digests of this Summary.  # noqa: E501

        List of content-addressable digests of locally available image manifests that the image is referenced from. Multiple manifests can refer to the same image.  These digests are usually only available if the image was either pulled from a registry, or if the image was pushed to a registry, which is when the manifest is generated and its digest calculated.  # noqa: E501

        :return: The repo_digests of this Summary.  # noqa: E501
        :rtype: list[str]
        """
        return self._repo_digests

    @repo_digests.setter
    def repo_digests(self, repo_digests):
        """Sets the repo_digests of this Summary.

        List of content-addressable digests of locally available image manifests that the image is referenced from. Multiple manifests can refer to the same image.  These digests are usually only available if the image was either pulled from a registry, or if the image was pushed to a registry, which is when the manifest is generated and its digest calculated.  # noqa: E501

        :param repo_digests: The repo_digests of this Summary.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and repo_digests is None:
            raise ValueError("Invalid value for `repo_digests`, must not be `None`")  # noqa: E501

        self._repo_digests = repo_digests

    @property
    def repo_tags(self):
        """Gets the repo_tags of this Summary.  # noqa: E501

        List of image names/tags in the local image cache that reference this image.  Multiple image tags can refer to the same image, and this list may be empty if no tags reference the image, in which case the image is \"untagged\", in which case it can still be referenced by its ID.  # noqa: E501

        :return: The repo_tags of this Summary.  # noqa: E501
        :rtype: list[str]
        """
        return self._repo_tags

    @repo_tags.setter
    def repo_tags(self, repo_tags):
        """Sets the repo_tags of this Summary.

        List of image names/tags in the local image cache that reference this image.  Multiple image tags can refer to the same image, and this list may be empty if no tags reference the image, in which case the image is \"untagged\", in which case it can still be referenced by its ID.  # noqa: E501

        :param repo_tags: The repo_tags of this Summary.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and repo_tags is None:
            raise ValueError("Invalid value for `repo_tags`, must not be `None`")  # noqa: E501

        self._repo_tags = repo_tags

    @property
    def shared_size(self):
        """Gets the shared_size of this Summary.  # noqa: E501

        Total size of image layers that are shared between this image and other images.  This size is not calculated by default. `-1` indicates that the value has not been set / calculated.  # noqa: E501

        :return: The shared_size of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._shared_size

    @shared_size.setter
    def shared_size(self, shared_size):
        """Sets the shared_size of this Summary.

        Total size of image layers that are shared between this image and other images.  This size is not calculated by default. `-1` indicates that the value has not been set / calculated.  # noqa: E501

        :param shared_size: The shared_size of this Summary.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and shared_size is None:
            raise ValueError("Invalid value for `shared_size`, must not be `None`")  # noqa: E501

        self._shared_size = shared_size

    @property
    def size(self):
        """Gets the size of this Summary.  # noqa: E501

        Total size of the image including all layers it is composed of.  # noqa: E501

        :return: The size of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Summary.

        Total size of the image including all layers it is composed of.  # noqa: E501

        :param size: The size of this Summary.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def virtual_size(self):
        """Gets the virtual_size of this Summary.  # noqa: E501

        Total size of the image including all layers it is composed of.  Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.  # noqa: E501

        :return: The virtual_size of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._virtual_size

    @virtual_size.setter
    def virtual_size(self, virtual_size):
        """Sets the virtual_size of this Summary.

        Total size of the image including all layers it is composed of.  Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.  # noqa: E501

        :param virtual_size: The virtual_size of this Summary.  # noqa: E501
        :type: int
        """

        self._virtual_size = virtual_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Summary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Summary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Summary):
            return True

        return self.to_dict() != other.to_dict()
