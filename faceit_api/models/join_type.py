# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class JoinType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_party': 'int',
        'party': 'bool',
        'premade': 'bool',
        'solo': 'bool'
    }

    attribute_map = {
        'max_party': 'maxParty',
        'party': 'party',
        'premade': 'premade',
        'solo': 'solo'
    }

    def __init__(self, max_party=None, party=None, premade=None, solo=None, _configuration=None):  # noqa: E501
        """JoinType - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._max_party = None
        self._party = None
        self._premade = None
        self._solo = None
        self.discriminator = None

        if max_party is not None:
            self.max_party = max_party
        if party is not None:
            self.party = party
        if premade is not None:
            self.premade = premade
        if solo is not None:
            self.solo = solo

    @property
    def max_party(self):
        """Gets the max_party of this JoinType.  # noqa: E501


        :return: The max_party of this JoinType.  # noqa: E501
        :rtype: int
        """
        return self._max_party

    @max_party.setter
    def max_party(self, max_party):
        """Sets the max_party of this JoinType.


        :param max_party: The max_party of this JoinType.  # noqa: E501
        :type: int
        """

        self._max_party = max_party

    @property
    def party(self):
        """Gets the party of this JoinType.  # noqa: E501


        :return: The party of this JoinType.  # noqa: E501
        :rtype: bool
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this JoinType.


        :param party: The party of this JoinType.  # noqa: E501
        :type: bool
        """

        self._party = party

    @property
    def premade(self):
        """Gets the premade of this JoinType.  # noqa: E501


        :return: The premade of this JoinType.  # noqa: E501
        :rtype: bool
        """
        return self._premade

    @premade.setter
    def premade(self, premade):
        """Sets the premade of this JoinType.


        :param premade: The premade of this JoinType.  # noqa: E501
        :type: bool
        """

        self._premade = premade

    @property
    def solo(self):
        """Gets the solo of this JoinType.  # noqa: E501


        :return: The solo of this JoinType.  # noqa: E501
        :rtype: bool
        """
        return self._solo

    @solo.setter
    def solo(self, solo):
        """Sets the solo of this JoinType.


        :param solo: The solo of this JoinType.  # noqa: E501
        :type: bool
        """

        self._solo = solo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JoinType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JoinType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JoinType):
            return True

        return self.to_dict() != other.to_dict()
