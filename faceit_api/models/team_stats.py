# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class TeamStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'game_id': 'str',
        'lifetime': 'dict(str, object)',
        'segments': 'list[dict(str, object)]',
        'team_id': 'str'
    }

    attribute_map = {
        'game_id': 'game_id',
        'lifetime': 'lifetime',
        'segments': 'segments',
        'team_id': 'team_id'
    }

    def __init__(self, game_id=None, lifetime=None, segments=None, team_id=None, _configuration=None):  # noqa: E501
        """TeamStats - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._game_id = None
        self._lifetime = None
        self._segments = None
        self._team_id = None
        self.discriminator = None

        if game_id is not None:
            self.game_id = game_id
        if lifetime is not None:
            self.lifetime = lifetime
        if segments is not None:
            self.segments = segments
        if team_id is not None:
            self.team_id = team_id

    @property
    def game_id(self):
        """Gets the game_id of this TeamStats.  # noqa: E501


        :return: The game_id of this TeamStats.  # noqa: E501
        :rtype: str
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this TeamStats.


        :param game_id: The game_id of this TeamStats.  # noqa: E501
        :type: str
        """

        self._game_id = game_id

    @property
    def lifetime(self):
        """Gets the lifetime of this TeamStats.  # noqa: E501


        :return: The lifetime of this TeamStats.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._lifetime

    @lifetime.setter
    def lifetime(self, lifetime):
        """Sets the lifetime of this TeamStats.


        :param lifetime: The lifetime of this TeamStats.  # noqa: E501
        :type: dict(str, object)
        """

        self._lifetime = lifetime

    @property
    def segments(self):
        """Gets the segments of this TeamStats.  # noqa: E501


        :return: The segments of this TeamStats.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this TeamStats.


        :param segments: The segments of this TeamStats.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._segments = segments

    @property
    def team_id(self):
        """Gets the team_id of this TeamStats.  # noqa: E501


        :return: The team_id of this TeamStats.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this TeamStats.


        :param team_id: The team_id of this TeamStats.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TeamStats):
            return True

        return self.to_dict() != other.to_dict()
