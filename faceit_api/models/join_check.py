# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class JoinCheck(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_team_types': 'list[str]',
        'blacklist_geo_countries': 'list[str]',
        'join_policy': 'str',
        'max_skill_level': 'int',
        'membership_type': 'str',
        'min_skill_level': 'int',
        'whitelist_geo_countries': 'list[str]',
        'whitelist_geo_countries_min_players': 'int'
    }

    attribute_map = {
        'allowed_team_types': 'allowed_team_types',
        'blacklist_geo_countries': 'blacklist_geo_countries',
        'join_policy': 'join_policy',
        'max_skill_level': 'max_skill_level',
        'membership_type': 'membership_type',
        'min_skill_level': 'min_skill_level',
        'whitelist_geo_countries': 'whitelist_geo_countries',
        'whitelist_geo_countries_min_players': 'whitelist_geo_countries_min_players'
    }

    def __init__(self, allowed_team_types=None, blacklist_geo_countries=None, join_policy=None, max_skill_level=None, membership_type=None, min_skill_level=None, whitelist_geo_countries=None, whitelist_geo_countries_min_players=None, _configuration=None):  # noqa: E501
        """JoinCheck - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allowed_team_types = None
        self._blacklist_geo_countries = None
        self._join_policy = None
        self._max_skill_level = None
        self._membership_type = None
        self._min_skill_level = None
        self._whitelist_geo_countries = None
        self._whitelist_geo_countries_min_players = None
        self.discriminator = None

        if allowed_team_types is not None:
            self.allowed_team_types = allowed_team_types
        if blacklist_geo_countries is not None:
            self.blacklist_geo_countries = blacklist_geo_countries
        if join_policy is not None:
            self.join_policy = join_policy
        if max_skill_level is not None:
            self.max_skill_level = max_skill_level
        if membership_type is not None:
            self.membership_type = membership_type
        if min_skill_level is not None:
            self.min_skill_level = min_skill_level
        if whitelist_geo_countries is not None:
            self.whitelist_geo_countries = whitelist_geo_countries
        if whitelist_geo_countries_min_players is not None:
            self.whitelist_geo_countries_min_players = whitelist_geo_countries_min_players

    @property
    def allowed_team_types(self):
        """Gets the allowed_team_types of this JoinCheck.  # noqa: E501


        :return: The allowed_team_types of this JoinCheck.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_team_types

    @allowed_team_types.setter
    def allowed_team_types(self, allowed_team_types):
        """Sets the allowed_team_types of this JoinCheck.


        :param allowed_team_types: The allowed_team_types of this JoinCheck.  # noqa: E501
        :type: list[str]
        """

        self._allowed_team_types = allowed_team_types

    @property
    def blacklist_geo_countries(self):
        """Gets the blacklist_geo_countries of this JoinCheck.  # noqa: E501


        :return: The blacklist_geo_countries of this JoinCheck.  # noqa: E501
        :rtype: list[str]
        """
        return self._blacklist_geo_countries

    @blacklist_geo_countries.setter
    def blacklist_geo_countries(self, blacklist_geo_countries):
        """Sets the blacklist_geo_countries of this JoinCheck.


        :param blacklist_geo_countries: The blacklist_geo_countries of this JoinCheck.  # noqa: E501
        :type: list[str]
        """

        self._blacklist_geo_countries = blacklist_geo_countries

    @property
    def join_policy(self):
        """Gets the join_policy of this JoinCheck.  # noqa: E501


        :return: The join_policy of this JoinCheck.  # noqa: E501
        :rtype: str
        """
        return self._join_policy

    @join_policy.setter
    def join_policy(self, join_policy):
        """Sets the join_policy of this JoinCheck.


        :param join_policy: The join_policy of this JoinCheck.  # noqa: E501
        :type: str
        """

        self._join_policy = join_policy

    @property
    def max_skill_level(self):
        """Gets the max_skill_level of this JoinCheck.  # noqa: E501


        :return: The max_skill_level of this JoinCheck.  # noqa: E501
        :rtype: int
        """
        return self._max_skill_level

    @max_skill_level.setter
    def max_skill_level(self, max_skill_level):
        """Sets the max_skill_level of this JoinCheck.


        :param max_skill_level: The max_skill_level of this JoinCheck.  # noqa: E501
        :type: int
        """

        self._max_skill_level = max_skill_level

    @property
    def membership_type(self):
        """Gets the membership_type of this JoinCheck.  # noqa: E501


        :return: The membership_type of this JoinCheck.  # noqa: E501
        :rtype: str
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this JoinCheck.


        :param membership_type: The membership_type of this JoinCheck.  # noqa: E501
        :type: str
        """

        self._membership_type = membership_type

    @property
    def min_skill_level(self):
        """Gets the min_skill_level of this JoinCheck.  # noqa: E501


        :return: The min_skill_level of this JoinCheck.  # noqa: E501
        :rtype: int
        """
        return self._min_skill_level

    @min_skill_level.setter
    def min_skill_level(self, min_skill_level):
        """Sets the min_skill_level of this JoinCheck.


        :param min_skill_level: The min_skill_level of this JoinCheck.  # noqa: E501
        :type: int
        """

        self._min_skill_level = min_skill_level

    @property
    def whitelist_geo_countries(self):
        """Gets the whitelist_geo_countries of this JoinCheck.  # noqa: E501


        :return: The whitelist_geo_countries of this JoinCheck.  # noqa: E501
        :rtype: list[str]
        """
        return self._whitelist_geo_countries

    @whitelist_geo_countries.setter
    def whitelist_geo_countries(self, whitelist_geo_countries):
        """Sets the whitelist_geo_countries of this JoinCheck.


        :param whitelist_geo_countries: The whitelist_geo_countries of this JoinCheck.  # noqa: E501
        :type: list[str]
        """

        self._whitelist_geo_countries = whitelist_geo_countries

    @property
    def whitelist_geo_countries_min_players(self):
        """Gets the whitelist_geo_countries_min_players of this JoinCheck.  # noqa: E501


        :return: The whitelist_geo_countries_min_players of this JoinCheck.  # noqa: E501
        :rtype: int
        """
        return self._whitelist_geo_countries_min_players

    @whitelist_geo_countries_min_players.setter
    def whitelist_geo_countries_min_players(self, whitelist_geo_countries_min_players):
        """Sets the whitelist_geo_countries_min_players of this JoinCheck.


        :param whitelist_geo_countries_min_players: The whitelist_geo_countries_min_players of this JoinCheck.  # noqa: E501
        :type: int
        """

        self._whitelist_geo_countries_min_players = whitelist_geo_countries_min_players

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JoinCheck, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JoinCheck):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JoinCheck):
            return True

        return self.to_dict() != other.to_dict()
