# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class LeaderboardConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_players': 'int',
        'points_per_loss': 'int',
        'points_per_win': 'int',
        'promotion': 'Promotion',
        'relegation': 'Relegation',
        'starting_points': 'int'
    }

    attribute_map = {
        'max_players': 'max_players',
        'points_per_loss': 'points_per_loss',
        'points_per_win': 'points_per_win',
        'promotion': 'promotion',
        'relegation': 'relegation',
        'starting_points': 'starting_points'
    }

    def __init__(self, max_players=None, points_per_loss=None, points_per_win=None, promotion=None, relegation=None, starting_points=None, _configuration=None):  # noqa: E501
        """LeaderboardConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._max_players = None
        self._points_per_loss = None
        self._points_per_win = None
        self._promotion = None
        self._relegation = None
        self._starting_points = None
        self.discriminator = None

        if max_players is not None:
            self.max_players = max_players
        if points_per_loss is not None:
            self.points_per_loss = points_per_loss
        if points_per_win is not None:
            self.points_per_win = points_per_win
        if promotion is not None:
            self.promotion = promotion
        if relegation is not None:
            self.relegation = relegation
        if starting_points is not None:
            self.starting_points = starting_points

    @property
    def max_players(self):
        """Gets the max_players of this LeaderboardConfig.  # noqa: E501

        Max players in the leaderboard.  # noqa: E501

        :return: The max_players of this LeaderboardConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_players

    @max_players.setter
    def max_players(self, max_players):
        """Sets the max_players of this LeaderboardConfig.

        Max players in the leaderboard.  # noqa: E501

        :param max_players: The max_players of this LeaderboardConfig.  # noqa: E501
        :type: int
        """

        self._max_players = max_players

    @property
    def points_per_loss(self):
        """Gets the points_per_loss of this LeaderboardConfig.  # noqa: E501

        User will lose this amount of points if they lose a match  # noqa: E501

        :return: The points_per_loss of this LeaderboardConfig.  # noqa: E501
        :rtype: int
        """
        return self._points_per_loss

    @points_per_loss.setter
    def points_per_loss(self, points_per_loss):
        """Sets the points_per_loss of this LeaderboardConfig.

        User will lose this amount of points if they lose a match  # noqa: E501

        :param points_per_loss: The points_per_loss of this LeaderboardConfig.  # noqa: E501
        :type: int
        """

        self._points_per_loss = points_per_loss

    @property
    def points_per_win(self):
        """Gets the points_per_win of this LeaderboardConfig.  # noqa: E501

        User will gain this amount of points if they win a match. When not configured, it's using the global value which is 3  # noqa: E501

        :return: The points_per_win of this LeaderboardConfig.  # noqa: E501
        :rtype: int
        """
        return self._points_per_win

    @points_per_win.setter
    def points_per_win(self, points_per_win):
        """Sets the points_per_win of this LeaderboardConfig.

        User will gain this amount of points if they win a match. When not configured, it's using the global value which is 3  # noqa: E501

        :param points_per_win: The points_per_win of this LeaderboardConfig.  # noqa: E501
        :type: int
        """

        self._points_per_win = points_per_win

    @property
    def promotion(self):
        """Gets the promotion of this LeaderboardConfig.  # noqa: E501


        :return: The promotion of this LeaderboardConfig.  # noqa: E501
        :rtype: Promotion
        """
        return self._promotion

    @promotion.setter
    def promotion(self, promotion):
        """Sets the promotion of this LeaderboardConfig.


        :param promotion: The promotion of this LeaderboardConfig.  # noqa: E501
        :type: Promotion
        """

        self._promotion = promotion

    @property
    def relegation(self):
        """Gets the relegation of this LeaderboardConfig.  # noqa: E501


        :return: The relegation of this LeaderboardConfig.  # noqa: E501
        :rtype: Relegation
        """
        return self._relegation

    @relegation.setter
    def relegation(self, relegation):
        """Sets the relegation of this LeaderboardConfig.


        :param relegation: The relegation of this LeaderboardConfig.  # noqa: E501
        :type: Relegation
        """

        self._relegation = relegation

    @property
    def starting_points(self):
        """Gets the starting_points of this LeaderboardConfig.  # noqa: E501

        Starting points for a player.  # noqa: E501

        :return: The starting_points of this LeaderboardConfig.  # noqa: E501
        :rtype: int
        """
        return self._starting_points

    @starting_points.setter
    def starting_points(self, starting_points):
        """Sets the starting_points of this LeaderboardConfig.

        Starting points for a player.  # noqa: E501

        :param starting_points: The starting_points of this LeaderboardConfig.  # noqa: E501
        :type: int
        """

        self._starting_points = starting_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeaderboardConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeaderboardConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LeaderboardConfig):
            return True

        return self.to_dict() != other.to_dict()
