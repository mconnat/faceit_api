# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class OrganizerSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'avatar': 'str',
        'countries': 'list[str]',
        'games': 'list[str]',
        'name': 'str',
        'organizer_id': 'str',
        'partner': 'bool',
        'regions': 'list[str]'
    }

    attribute_map = {
        'active': 'active',
        'avatar': 'avatar',
        'countries': 'countries',
        'games': 'games',
        'name': 'name',
        'organizer_id': 'organizer_id',
        'partner': 'partner',
        'regions': 'regions'
    }

    def __init__(self, active=None, avatar=None, countries=None, games=None, name=None, organizer_id=None, partner=None, regions=None, _configuration=None):  # noqa: E501
        """OrganizerSearch - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active = None
        self._avatar = None
        self._countries = None
        self._games = None
        self._name = None
        self._organizer_id = None
        self._partner = None
        self._regions = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if avatar is not None:
            self.avatar = avatar
        if countries is not None:
            self.countries = countries
        if games is not None:
            self.games = games
        if name is not None:
            self.name = name
        if organizer_id is not None:
            self.organizer_id = organizer_id
        if partner is not None:
            self.partner = partner
        if regions is not None:
            self.regions = regions

    @property
    def active(self):
        """Gets the active of this OrganizerSearch.  # noqa: E501


        :return: The active of this OrganizerSearch.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this OrganizerSearch.


        :param active: The active of this OrganizerSearch.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def avatar(self):
        """Gets the avatar of this OrganizerSearch.  # noqa: E501


        :return: The avatar of this OrganizerSearch.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this OrganizerSearch.


        :param avatar: The avatar of this OrganizerSearch.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def countries(self):
        """Gets the countries of this OrganizerSearch.  # noqa: E501


        :return: The countries of this OrganizerSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this OrganizerSearch.


        :param countries: The countries of this OrganizerSearch.  # noqa: E501
        :type: list[str]
        """

        self._countries = countries

    @property
    def games(self):
        """Gets the games of this OrganizerSearch.  # noqa: E501


        :return: The games of this OrganizerSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this OrganizerSearch.


        :param games: The games of this OrganizerSearch.  # noqa: E501
        :type: list[str]
        """

        self._games = games

    @property
    def name(self):
        """Gets the name of this OrganizerSearch.  # noqa: E501


        :return: The name of this OrganizerSearch.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizerSearch.


        :param name: The name of this OrganizerSearch.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organizer_id(self):
        """Gets the organizer_id of this OrganizerSearch.  # noqa: E501


        :return: The organizer_id of this OrganizerSearch.  # noqa: E501
        :rtype: str
        """
        return self._organizer_id

    @organizer_id.setter
    def organizer_id(self, organizer_id):
        """Sets the organizer_id of this OrganizerSearch.


        :param organizer_id: The organizer_id of this OrganizerSearch.  # noqa: E501
        :type: str
        """

        self._organizer_id = organizer_id

    @property
    def partner(self):
        """Gets the partner of this OrganizerSearch.  # noqa: E501


        :return: The partner of this OrganizerSearch.  # noqa: E501
        :rtype: bool
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this OrganizerSearch.


        :param partner: The partner of this OrganizerSearch.  # noqa: E501
        :type: bool
        """

        self._partner = partner

    @property
    def regions(self):
        """Gets the regions of this OrganizerSearch.  # noqa: E501


        :return: The regions of this OrganizerSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this OrganizerSearch.


        :param regions: The regions of this OrganizerSearch.  # noqa: E501
        :type: list[str]
        """

        self._regions = regions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizerSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizerSearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizerSearch):
            return True

        return self.to_dict() != other.to_dict()
