# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Game(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assets': 'GameAssets',
        'game_id': 'str',
        'long_label': 'str',
        'order': 'int',
        'parent_game_id': 'str',
        'platforms': 'list[str]',
        'regions': 'list[str]',
        'short_label': 'str'
    }

    attribute_map = {
        'assets': 'assets',
        'game_id': 'game_id',
        'long_label': 'long_label',
        'order': 'order',
        'parent_game_id': 'parent_game_id',
        'platforms': 'platforms',
        'regions': 'regions',
        'short_label': 'short_label'
    }

    def __init__(self, assets=None, game_id=None, long_label=None, order=None, parent_game_id=None, platforms=None, regions=None, short_label=None, _configuration=None):  # noqa: E501
        """Game - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._assets = None
        self._game_id = None
        self._long_label = None
        self._order = None
        self._parent_game_id = None
        self._platforms = None
        self._regions = None
        self._short_label = None
        self.discriminator = None

        if assets is not None:
            self.assets = assets
        if game_id is not None:
            self.game_id = game_id
        if long_label is not None:
            self.long_label = long_label
        if order is not None:
            self.order = order
        if parent_game_id is not None:
            self.parent_game_id = parent_game_id
        if platforms is not None:
            self.platforms = platforms
        if regions is not None:
            self.regions = regions
        if short_label is not None:
            self.short_label = short_label

    @property
    def assets(self):
        """Gets the assets of this Game.  # noqa: E501


        :return: The assets of this Game.  # noqa: E501
        :rtype: GameAssets
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Game.


        :param assets: The assets of this Game.  # noqa: E501
        :type: GameAssets
        """

        self._assets = assets

    @property
    def game_id(self):
        """Gets the game_id of this Game.  # noqa: E501


        :return: The game_id of this Game.  # noqa: E501
        :rtype: str
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this Game.


        :param game_id: The game_id of this Game.  # noqa: E501
        :type: str
        """

        self._game_id = game_id

    @property
    def long_label(self):
        """Gets the long_label of this Game.  # noqa: E501


        :return: The long_label of this Game.  # noqa: E501
        :rtype: str
        """
        return self._long_label

    @long_label.setter
    def long_label(self, long_label):
        """Sets the long_label of this Game.


        :param long_label: The long_label of this Game.  # noqa: E501
        :type: str
        """

        self._long_label = long_label

    @property
    def order(self):
        """Gets the order of this Game.  # noqa: E501


        :return: The order of this Game.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Game.


        :param order: The order of this Game.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def parent_game_id(self):
        """Gets the parent_game_id of this Game.  # noqa: E501


        :return: The parent_game_id of this Game.  # noqa: E501
        :rtype: str
        """
        return self._parent_game_id

    @parent_game_id.setter
    def parent_game_id(self, parent_game_id):
        """Sets the parent_game_id of this Game.


        :param parent_game_id: The parent_game_id of this Game.  # noqa: E501
        :type: str
        """

        self._parent_game_id = parent_game_id

    @property
    def platforms(self):
        """Gets the platforms of this Game.  # noqa: E501


        :return: The platforms of this Game.  # noqa: E501
        :rtype: list[str]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this Game.


        :param platforms: The platforms of this Game.  # noqa: E501
        :type: list[str]
        """

        self._platforms = platforms

    @property
    def regions(self):
        """Gets the regions of this Game.  # noqa: E501


        :return: The regions of this Game.  # noqa: E501
        :rtype: list[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this Game.


        :param regions: The regions of this Game.  # noqa: E501
        :type: list[str]
        """

        self._regions = regions

    @property
    def short_label(self):
        """Gets the short_label of this Game.  # noqa: E501


        :return: The short_label of this Game.  # noqa: E501
        :rtype: str
        """
        return self._short_label

    @short_label.setter
    def short_label(self, short_label):
        """Sets the short_label of this Game.


        :param short_label: The short_label of this Game.  # noqa: E501
        :type: str
        """

        self._short_label = short_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Game, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Game):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Game):
            return True

        return self.to_dict() != other.to_dict()
