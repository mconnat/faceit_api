# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class TournamentTeams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'checked_in': 'list[TournamentTeam]',
        'finished': 'list[TournamentTeam]',
        'joined': 'list[TournamentTeam]',
        'started': 'list[TournamentTeam]'
    }

    attribute_map = {
        'checked_in': 'checked_in',
        'finished': 'finished',
        'joined': 'joined',
        'started': 'started'
    }

    def __init__(self, checked_in=None, finished=None, joined=None, started=None, _configuration=None):  # noqa: E501
        """TournamentTeams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._checked_in = None
        self._finished = None
        self._joined = None
        self._started = None
        self.discriminator = None

        if checked_in is not None:
            self.checked_in = checked_in
        if finished is not None:
            self.finished = finished
        if joined is not None:
            self.joined = joined
        if started is not None:
            self.started = started

    @property
    def checked_in(self):
        """Gets the checked_in of this TournamentTeams.  # noqa: E501


        :return: The checked_in of this TournamentTeams.  # noqa: E501
        :rtype: list[TournamentTeam]
        """
        return self._checked_in

    @checked_in.setter
    def checked_in(self, checked_in):
        """Sets the checked_in of this TournamentTeams.


        :param checked_in: The checked_in of this TournamentTeams.  # noqa: E501
        :type: list[TournamentTeam]
        """

        self._checked_in = checked_in

    @property
    def finished(self):
        """Gets the finished of this TournamentTeams.  # noqa: E501


        :return: The finished of this TournamentTeams.  # noqa: E501
        :rtype: list[TournamentTeam]
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this TournamentTeams.


        :param finished: The finished of this TournamentTeams.  # noqa: E501
        :type: list[TournamentTeam]
        """

        self._finished = finished

    @property
    def joined(self):
        """Gets the joined of this TournamentTeams.  # noqa: E501


        :return: The joined of this TournamentTeams.  # noqa: E501
        :rtype: list[TournamentTeam]
        """
        return self._joined

    @joined.setter
    def joined(self, joined):
        """Sets the joined of this TournamentTeams.


        :param joined: The joined of this TournamentTeams.  # noqa: E501
        :type: list[TournamentTeam]
        """

        self._joined = joined

    @property
    def started(self):
        """Gets the started of this TournamentTeams.  # noqa: E501


        :return: The started of this TournamentTeams.  # noqa: E501
        :rtype: list[TournamentTeam]
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this TournamentTeams.


        :param started: The started of this TournamentTeams.  # noqa: E501
        :type: list[TournamentTeam]
        """

        self._started = started

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TournamentTeams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TournamentTeams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TournamentTeams):
            return True

        return self.to_dict() != other.to_dict()
