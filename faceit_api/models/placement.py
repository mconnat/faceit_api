# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Placement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'division_name': 'str',
        'division_type': 'str',
        'ladder': 'str',
        'matchmaking_id': 'str',
        'season_number': 'int',
        'tier_name': 'str',
        'tier_rank': 'int'
    }

    attribute_map = {
        'division_name': 'division_name',
        'division_type': 'division_type',
        'ladder': 'ladder',
        'matchmaking_id': 'matchmaking_id',
        'season_number': 'season_number',
        'tier_name': 'tier_name',
        'tier_rank': 'tier_rank'
    }

    def __init__(self, division_name=None, division_type=None, ladder=None, matchmaking_id=None, season_number=None, tier_name=None, tier_rank=None, _configuration=None):  # noqa: E501
        """Placement - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._division_name = None
        self._division_type = None
        self._ladder = None
        self._matchmaking_id = None
        self._season_number = None
        self._tier_name = None
        self._tier_rank = None
        self.discriminator = None

        if division_name is not None:
            self.division_name = division_name
        if division_type is not None:
            self.division_type = division_type
        if ladder is not None:
            self.ladder = ladder
        if matchmaking_id is not None:
            self.matchmaking_id = matchmaking_id
        if season_number is not None:
            self.season_number = season_number
        if tier_name is not None:
            self.tier_name = tier_name
        if tier_rank is not None:
            self.tier_rank = tier_rank

    @property
    def division_name(self):
        """Gets the division_name of this Placement.  # noqa: E501


        :return: The division_name of this Placement.  # noqa: E501
        :rtype: str
        """
        return self._division_name

    @division_name.setter
    def division_name(self, division_name):
        """Sets the division_name of this Placement.


        :param division_name: The division_name of this Placement.  # noqa: E501
        :type: str
        """

        self._division_name = division_name

    @property
    def division_type(self):
        """Gets the division_type of this Placement.  # noqa: E501


        :return: The division_type of this Placement.  # noqa: E501
        :rtype: str
        """
        return self._division_type

    @division_type.setter
    def division_type(self, division_type):
        """Sets the division_type of this Placement.


        :param division_type: The division_type of this Placement.  # noqa: E501
        :type: str
        """

        self._division_type = division_type

    @property
    def ladder(self):
        """Gets the ladder of this Placement.  # noqa: E501


        :return: The ladder of this Placement.  # noqa: E501
        :rtype: str
        """
        return self._ladder

    @ladder.setter
    def ladder(self, ladder):
        """Sets the ladder of this Placement.


        :param ladder: The ladder of this Placement.  # noqa: E501
        :type: str
        """

        self._ladder = ladder

    @property
    def matchmaking_id(self):
        """Gets the matchmaking_id of this Placement.  # noqa: E501


        :return: The matchmaking_id of this Placement.  # noqa: E501
        :rtype: str
        """
        return self._matchmaking_id

    @matchmaking_id.setter
    def matchmaking_id(self, matchmaking_id):
        """Sets the matchmaking_id of this Placement.


        :param matchmaking_id: The matchmaking_id of this Placement.  # noqa: E501
        :type: str
        """

        self._matchmaking_id = matchmaking_id

    @property
    def season_number(self):
        """Gets the season_number of this Placement.  # noqa: E501


        :return: The season_number of this Placement.  # noqa: E501
        :rtype: int
        """
        return self._season_number

    @season_number.setter
    def season_number(self, season_number):
        """Sets the season_number of this Placement.


        :param season_number: The season_number of this Placement.  # noqa: E501
        :type: int
        """

        self._season_number = season_number

    @property
    def tier_name(self):
        """Gets the tier_name of this Placement.  # noqa: E501


        :return: The tier_name of this Placement.  # noqa: E501
        :rtype: str
        """
        return self._tier_name

    @tier_name.setter
    def tier_name(self, tier_name):
        """Sets the tier_name of this Placement.


        :param tier_name: The tier_name of this Placement.  # noqa: E501
        :type: str
        """

        self._tier_name = tier_name

    @property
    def tier_rank(self):
        """Gets the tier_rank of this Placement.  # noqa: E501


        :return: The tier_rank of this Placement.  # noqa: E501
        :rtype: int
        """
        return self._tier_rank

    @tier_rank.setter
    def tier_rank(self, tier_rank):
        """Sets the tier_rank of this Placement.


        :param tier_rank: The tier_rank of this Placement.  # noqa: E501
        :type: int
        """

        self._tier_rank = tier_rank

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Placement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Placement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Placement):
            return True

        return self.to_dict() != other.to_dict()
