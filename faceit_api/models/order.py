# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'game': 'str',
        'id': 'str',
        'item': 'OrderItem',
        'status': 'str',
        'updated_at': 'datetime',
        'user': 'OrderUser'
    }

    attribute_map = {
        'created_at': 'created_at',
        'game': 'game',
        'id': 'id',
        'item': 'item',
        'status': 'status',
        'updated_at': 'updated_at',
        'user': 'user'
    }

    def __init__(self, created_at=None, game=None, id=None, item=None, status=None, updated_at=None, user=None, _configuration=None):  # noqa: E501
        """Order - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_at = None
        self._game = None
        self._id = None
        self._item = None
        self._status = None
        self._updated_at = None
        self._user = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if game is not None:
            self.game = game
        if id is not None:
            self.id = id
        if item is not None:
            self.item = item
        if status is not None:
            self.status = status
        if updated_at is not None:
            self.updated_at = updated_at
        if user is not None:
            self.user = user

    @property
    def created_at(self):
        """Gets the created_at of this Order.  # noqa: E501


        :return: The created_at of this Order.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Order.


        :param created_at: The created_at of this Order.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def game(self):
        """Gets the game of this Order.  # noqa: E501


        :return: The game of this Order.  # noqa: E501
        :rtype: str
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this Order.


        :param game: The game of this Order.  # noqa: E501
        :type: str
        """

        self._game = game

    @property
    def id(self):
        """Gets the id of this Order.  # noqa: E501


        :return: The id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.


        :param id: The id of this Order.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def item(self):
        """Gets the item of this Order.  # noqa: E501


        :return: The item of this Order.  # noqa: E501
        :rtype: OrderItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this Order.


        :param item: The item of this Order.  # noqa: E501
        :type: OrderItem
        """

        self._item = item

    @property
    def status(self):
        """Gets the status of this Order.  # noqa: E501


        :return: The status of this Order.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.


        :param status: The status of this Order.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this Order.  # noqa: E501


        :return: The updated_at of this Order.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Order.


        :param updated_at: The updated_at of this Order.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Order.  # noqa: E501


        :return: The user of this Order.  # noqa: E501
        :rtype: OrderUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Order.


        :param user: The user of this Order.  # noqa: E501
        :type: OrderUser
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Order):
            return True

        return self.to_dict() != other.to_dict()
