# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Ranking(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_streak': 'int',
        'draw': 'int',
        'lost': 'int',
        'played': 'int',
        'player': 'UserSimple',
        'points': 'int',
        'position': 'int',
        'win_rate': 'float',
        'won': 'int'
    }

    attribute_map = {
        'current_streak': 'current_streak',
        'draw': 'draw',
        'lost': 'lost',
        'played': 'played',
        'player': 'player',
        'points': 'points',
        'position': 'position',
        'win_rate': 'win_rate',
        'won': 'won'
    }

    def __init__(self, current_streak=None, draw=None, lost=None, played=None, player=None, points=None, position=None, win_rate=None, won=None, _configuration=None):  # noqa: E501
        """Ranking - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._current_streak = None
        self._draw = None
        self._lost = None
        self._played = None
        self._player = None
        self._points = None
        self._position = None
        self._win_rate = None
        self._won = None
        self.discriminator = None

        if current_streak is not None:
            self.current_streak = current_streak
        if draw is not None:
            self.draw = draw
        if lost is not None:
            self.lost = lost
        if played is not None:
            self.played = played
        if player is not None:
            self.player = player
        if points is not None:
            self.points = points
        if position is not None:
            self.position = position
        if win_rate is not None:
            self.win_rate = win_rate
        if won is not None:
            self.won = won

    @property
    def current_streak(self):
        """Gets the current_streak of this Ranking.  # noqa: E501


        :return: The current_streak of this Ranking.  # noqa: E501
        :rtype: int
        """
        return self._current_streak

    @current_streak.setter
    def current_streak(self, current_streak):
        """Sets the current_streak of this Ranking.


        :param current_streak: The current_streak of this Ranking.  # noqa: E501
        :type: int
        """

        self._current_streak = current_streak

    @property
    def draw(self):
        """Gets the draw of this Ranking.  # noqa: E501


        :return: The draw of this Ranking.  # noqa: E501
        :rtype: int
        """
        return self._draw

    @draw.setter
    def draw(self, draw):
        """Sets the draw of this Ranking.


        :param draw: The draw of this Ranking.  # noqa: E501
        :type: int
        """

        self._draw = draw

    @property
    def lost(self):
        """Gets the lost of this Ranking.  # noqa: E501


        :return: The lost of this Ranking.  # noqa: E501
        :rtype: int
        """
        return self._lost

    @lost.setter
    def lost(self, lost):
        """Sets the lost of this Ranking.


        :param lost: The lost of this Ranking.  # noqa: E501
        :type: int
        """

        self._lost = lost

    @property
    def played(self):
        """Gets the played of this Ranking.  # noqa: E501


        :return: The played of this Ranking.  # noqa: E501
        :rtype: int
        """
        return self._played

    @played.setter
    def played(self, played):
        """Sets the played of this Ranking.


        :param played: The played of this Ranking.  # noqa: E501
        :type: int
        """

        self._played = played

    @property
    def player(self):
        """Gets the player of this Ranking.  # noqa: E501


        :return: The player of this Ranking.  # noqa: E501
        :rtype: UserSimple
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this Ranking.


        :param player: The player of this Ranking.  # noqa: E501
        :type: UserSimple
        """

        self._player = player

    @property
    def points(self):
        """Gets the points of this Ranking.  # noqa: E501


        :return: The points of this Ranking.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this Ranking.


        :param points: The points of this Ranking.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def position(self):
        """Gets the position of this Ranking.  # noqa: E501


        :return: The position of this Ranking.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Ranking.


        :param position: The position of this Ranking.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def win_rate(self):
        """Gets the win_rate of this Ranking.  # noqa: E501


        :return: The win_rate of this Ranking.  # noqa: E501
        :rtype: float
        """
        return self._win_rate

    @win_rate.setter
    def win_rate(self, win_rate):
        """Sets the win_rate of this Ranking.


        :param win_rate: The win_rate of this Ranking.  # noqa: E501
        :type: float
        """

        self._win_rate = win_rate

    @property
    def won(self):
        """Gets the won of this Ranking.  # noqa: E501


        :return: The won of this Ranking.  # noqa: E501
        :rtype: int
        """
        return self._won

    @won.setter
    def won(self, won):
        """Sets the won of this Ranking.


        :param won: The won of this Ranking.  # noqa: E501
        :type: int
        """

        self._won = won

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ranking, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ranking):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Ranking):
            return True

        return self.to_dict() != other.to_dict()
