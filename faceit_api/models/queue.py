# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Queue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_tool': 'bool',
        'anticheat_required': 'bool',
        'calculate_elo': 'bool',
        'captain_selection': 'str',
        'check_in': 'CheckIn',
        'entity_id': 'str',
        'entity_type': 'str',
        'fbi_management': 'bool',
        'game': 'str',
        'group_similar': 'bool',
        'id': 'str',
        'join_type': 'JoinType',
        'last_modified': 'datetime',
        'max_skill': 'int',
        'min_skill': 'int',
        'no_of_players': 'int',
        'open': 'bool',
        'organizer_id': 'str',
        'paused': 'bool',
        'queue_algorithm': 'QueueAlgorithm',
        'queue_name': 'str',
        'region': 'str',
        'state': 'str',
        'verified_matching': 'bool'
    }

    attribute_map = {
        'admin_tool': 'adminTool',
        'anticheat_required': 'anticheatRequired',
        'calculate_elo': 'calculateElo',
        'captain_selection': 'captainSelection',
        'check_in': 'checkIn',
        'entity_id': 'entityId',
        'entity_type': 'entityType',
        'fbi_management': 'fbiManagement',
        'game': 'game',
        'group_similar': 'groupSimilar',
        'id': 'id',
        'join_type': 'joinType',
        'last_modified': 'lastModified',
        'max_skill': 'maxSkill',
        'min_skill': 'minSkill',
        'no_of_players': 'noOfPlayers',
        'open': 'open',
        'organizer_id': 'organizerId',
        'paused': 'paused',
        'queue_algorithm': 'queueAlgorithm',
        'queue_name': 'queueName',
        'region': 'region',
        'state': 'state',
        'verified_matching': 'verifiedMatching'
    }

    def __init__(self, admin_tool=None, anticheat_required=None, calculate_elo=None, captain_selection=None, check_in=None, entity_id=None, entity_type=None, fbi_management=None, game=None, group_similar=None, id=None, join_type=None, last_modified=None, max_skill=None, min_skill=None, no_of_players=None, open=None, organizer_id=None, paused=None, queue_algorithm=None, queue_name=None, region=None, state=None, verified_matching=None, _configuration=None):  # noqa: E501
        """Queue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._admin_tool = None
        self._anticheat_required = None
        self._calculate_elo = None
        self._captain_selection = None
        self._check_in = None
        self._entity_id = None
        self._entity_type = None
        self._fbi_management = None
        self._game = None
        self._group_similar = None
        self._id = None
        self._join_type = None
        self._last_modified = None
        self._max_skill = None
        self._min_skill = None
        self._no_of_players = None
        self._open = None
        self._organizer_id = None
        self._paused = None
        self._queue_algorithm = None
        self._queue_name = None
        self._region = None
        self._state = None
        self._verified_matching = None
        self.discriminator = None

        if admin_tool is not None:
            self.admin_tool = admin_tool
        if anticheat_required is not None:
            self.anticheat_required = anticheat_required
        if calculate_elo is not None:
            self.calculate_elo = calculate_elo
        if captain_selection is not None:
            self.captain_selection = captain_selection
        if check_in is not None:
            self.check_in = check_in
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_type is not None:
            self.entity_type = entity_type
        if fbi_management is not None:
            self.fbi_management = fbi_management
        if game is not None:
            self.game = game
        if group_similar is not None:
            self.group_similar = group_similar
        if id is not None:
            self.id = id
        if join_type is not None:
            self.join_type = join_type
        if last_modified is not None:
            self.last_modified = last_modified
        if max_skill is not None:
            self.max_skill = max_skill
        if min_skill is not None:
            self.min_skill = min_skill
        if no_of_players is not None:
            self.no_of_players = no_of_players
        if open is not None:
            self.open = open
        if organizer_id is not None:
            self.organizer_id = organizer_id
        if paused is not None:
            self.paused = paused
        if queue_algorithm is not None:
            self.queue_algorithm = queue_algorithm
        if queue_name is not None:
            self.queue_name = queue_name
        if region is not None:
            self.region = region
        if state is not None:
            self.state = state
        if verified_matching is not None:
            self.verified_matching = verified_matching

    @property
    def admin_tool(self):
        """Gets the admin_tool of this Queue.  # noqa: E501


        :return: The admin_tool of this Queue.  # noqa: E501
        :rtype: bool
        """
        return self._admin_tool

    @admin_tool.setter
    def admin_tool(self, admin_tool):
        """Sets the admin_tool of this Queue.


        :param admin_tool: The admin_tool of this Queue.  # noqa: E501
        :type: bool
        """

        self._admin_tool = admin_tool

    @property
    def anticheat_required(self):
        """Gets the anticheat_required of this Queue.  # noqa: E501


        :return: The anticheat_required of this Queue.  # noqa: E501
        :rtype: bool
        """
        return self._anticheat_required

    @anticheat_required.setter
    def anticheat_required(self, anticheat_required):
        """Sets the anticheat_required of this Queue.


        :param anticheat_required: The anticheat_required of this Queue.  # noqa: E501
        :type: bool
        """

        self._anticheat_required = anticheat_required

    @property
    def calculate_elo(self):
        """Gets the calculate_elo of this Queue.  # noqa: E501


        :return: The calculate_elo of this Queue.  # noqa: E501
        :rtype: bool
        """
        return self._calculate_elo

    @calculate_elo.setter
    def calculate_elo(self, calculate_elo):
        """Sets the calculate_elo of this Queue.


        :param calculate_elo: The calculate_elo of this Queue.  # noqa: E501
        :type: bool
        """

        self._calculate_elo = calculate_elo

    @property
    def captain_selection(self):
        """Gets the captain_selection of this Queue.  # noqa: E501


        :return: The captain_selection of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._captain_selection

    @captain_selection.setter
    def captain_selection(self, captain_selection):
        """Sets the captain_selection of this Queue.


        :param captain_selection: The captain_selection of this Queue.  # noqa: E501
        :type: str
        """

        self._captain_selection = captain_selection

    @property
    def check_in(self):
        """Gets the check_in of this Queue.  # noqa: E501


        :return: The check_in of this Queue.  # noqa: E501
        :rtype: CheckIn
        """
        return self._check_in

    @check_in.setter
    def check_in(self, check_in):
        """Sets the check_in of this Queue.


        :param check_in: The check_in of this Queue.  # noqa: E501
        :type: CheckIn
        """

        self._check_in = check_in

    @property
    def entity_id(self):
        """Gets the entity_id of this Queue.  # noqa: E501


        :return: The entity_id of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Queue.


        :param entity_id: The entity_id of this Queue.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this Queue.  # noqa: E501


        :return: The entity_type of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Queue.


        :param entity_type: The entity_type of this Queue.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def fbi_management(self):
        """Gets the fbi_management of this Queue.  # noqa: E501


        :return: The fbi_management of this Queue.  # noqa: E501
        :rtype: bool
        """
        return self._fbi_management

    @fbi_management.setter
    def fbi_management(self, fbi_management):
        """Sets the fbi_management of this Queue.


        :param fbi_management: The fbi_management of this Queue.  # noqa: E501
        :type: bool
        """

        self._fbi_management = fbi_management

    @property
    def game(self):
        """Gets the game of this Queue.  # noqa: E501


        :return: The game of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this Queue.


        :param game: The game of this Queue.  # noqa: E501
        :type: str
        """

        self._game = game

    @property
    def group_similar(self):
        """Gets the group_similar of this Queue.  # noqa: E501


        :return: The group_similar of this Queue.  # noqa: E501
        :rtype: bool
        """
        return self._group_similar

    @group_similar.setter
    def group_similar(self, group_similar):
        """Sets the group_similar of this Queue.


        :param group_similar: The group_similar of this Queue.  # noqa: E501
        :type: bool
        """

        self._group_similar = group_similar

    @property
    def id(self):
        """Gets the id of this Queue.  # noqa: E501


        :return: The id of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Queue.


        :param id: The id of this Queue.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def join_type(self):
        """Gets the join_type of this Queue.  # noqa: E501


        :return: The join_type of this Queue.  # noqa: E501
        :rtype: JoinType
        """
        return self._join_type

    @join_type.setter
    def join_type(self, join_type):
        """Sets the join_type of this Queue.


        :param join_type: The join_type of this Queue.  # noqa: E501
        :type: JoinType
        """

        self._join_type = join_type

    @property
    def last_modified(self):
        """Gets the last_modified of this Queue.  # noqa: E501


        :return: The last_modified of this Queue.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Queue.


        :param last_modified: The last_modified of this Queue.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def max_skill(self):
        """Gets the max_skill of this Queue.  # noqa: E501


        :return: The max_skill of this Queue.  # noqa: E501
        :rtype: int
        """
        return self._max_skill

    @max_skill.setter
    def max_skill(self, max_skill):
        """Sets the max_skill of this Queue.


        :param max_skill: The max_skill of this Queue.  # noqa: E501
        :type: int
        """

        self._max_skill = max_skill

    @property
    def min_skill(self):
        """Gets the min_skill of this Queue.  # noqa: E501


        :return: The min_skill of this Queue.  # noqa: E501
        :rtype: int
        """
        return self._min_skill

    @min_skill.setter
    def min_skill(self, min_skill):
        """Sets the min_skill of this Queue.


        :param min_skill: The min_skill of this Queue.  # noqa: E501
        :type: int
        """

        self._min_skill = min_skill

    @property
    def no_of_players(self):
        """Gets the no_of_players of this Queue.  # noqa: E501


        :return: The no_of_players of this Queue.  # noqa: E501
        :rtype: int
        """
        return self._no_of_players

    @no_of_players.setter
    def no_of_players(self, no_of_players):
        """Sets the no_of_players of this Queue.


        :param no_of_players: The no_of_players of this Queue.  # noqa: E501
        :type: int
        """

        self._no_of_players = no_of_players

    @property
    def open(self):
        """Gets the open of this Queue.  # noqa: E501


        :return: The open of this Queue.  # noqa: E501
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this Queue.


        :param open: The open of this Queue.  # noqa: E501
        :type: bool
        """

        self._open = open

    @property
    def organizer_id(self):
        """Gets the organizer_id of this Queue.  # noqa: E501


        :return: The organizer_id of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._organizer_id

    @organizer_id.setter
    def organizer_id(self, organizer_id):
        """Sets the organizer_id of this Queue.


        :param organizer_id: The organizer_id of this Queue.  # noqa: E501
        :type: str
        """

        self._organizer_id = organizer_id

    @property
    def paused(self):
        """Gets the paused of this Queue.  # noqa: E501


        :return: The paused of this Queue.  # noqa: E501
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this Queue.


        :param paused: The paused of this Queue.  # noqa: E501
        :type: bool
        """

        self._paused = paused

    @property
    def queue_algorithm(self):
        """Gets the queue_algorithm of this Queue.  # noqa: E501


        :return: The queue_algorithm of this Queue.  # noqa: E501
        :rtype: QueueAlgorithm
        """
        return self._queue_algorithm

    @queue_algorithm.setter
    def queue_algorithm(self, queue_algorithm):
        """Sets the queue_algorithm of this Queue.


        :param queue_algorithm: The queue_algorithm of this Queue.  # noqa: E501
        :type: QueueAlgorithm
        """

        self._queue_algorithm = queue_algorithm

    @property
    def queue_name(self):
        """Gets the queue_name of this Queue.  # noqa: E501


        :return: The queue_name of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._queue_name

    @queue_name.setter
    def queue_name(self, queue_name):
        """Sets the queue_name of this Queue.


        :param queue_name: The queue_name of this Queue.  # noqa: E501
        :type: str
        """

        self._queue_name = queue_name

    @property
    def region(self):
        """Gets the region of this Queue.  # noqa: E501


        :return: The region of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Queue.


        :param region: The region of this Queue.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def state(self):
        """Gets the state of this Queue.  # noqa: E501


        :return: The state of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Queue.


        :param state: The state of this Queue.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def verified_matching(self):
        """Gets the verified_matching of this Queue.  # noqa: E501


        :return: The verified_matching of this Queue.  # noqa: E501
        :rtype: bool
        """
        return self._verified_matching

    @verified_matching.setter
    def verified_matching(self, verified_matching):
        """Sets the verified_matching of this Queue.


        :param verified_matching: The verified_matching of this Queue.  # noqa: E501
        :type: bool
        """

        self._verified_matching = verified_matching

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Queue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Queue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Queue):
            return True

        return self.to_dict() != other.to_dict()
