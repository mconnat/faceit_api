# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class ChampionshipStream(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'platform': 'str',
        'source': 'str',
        'title': 'str'
    }

    attribute_map = {
        'active': 'active',
        'platform': 'platform',
        'source': 'source',
        'title': 'title'
    }

    def __init__(self, active=None, platform=None, source=None, title=None, _configuration=None):  # noqa: E501
        """ChampionshipStream - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active = None
        self._platform = None
        self._source = None
        self._title = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if platform is not None:
            self.platform = platform
        if source is not None:
            self.source = source
        if title is not None:
            self.title = title

    @property
    def active(self):
        """Gets the active of this ChampionshipStream.  # noqa: E501


        :return: The active of this ChampionshipStream.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ChampionshipStream.


        :param active: The active of this ChampionshipStream.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def platform(self):
        """Gets the platform of this ChampionshipStream.  # noqa: E501


        :return: The platform of this ChampionshipStream.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ChampionshipStream.


        :param platform: The platform of this ChampionshipStream.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def source(self):
        """Gets the source of this ChampionshipStream.  # noqa: E501


        :return: The source of this ChampionshipStream.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ChampionshipStream.


        :param source: The source of this ChampionshipStream.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def title(self):
        """Gets the title of this ChampionshipStream.  # noqa: E501


        :return: The title of this ChampionshipStream.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ChampionshipStream.


        :param title: The title of this ChampionshipStream.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChampionshipStream, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChampionshipStream):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChampionshipStream):
            return True

        return self.to_dict() != other.to_dict()
