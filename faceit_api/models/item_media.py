# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class ItemMedia(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avatar_full': 'str',
        'avatar_medium': 'str',
        'avatar_small': 'str'
    }

    attribute_map = {
        'avatar_full': 'avatar_full',
        'avatar_medium': 'avatar_medium',
        'avatar_small': 'avatar_small'
    }

    def __init__(self, avatar_full=None, avatar_medium=None, avatar_small=None, _configuration=None):  # noqa: E501
        """ItemMedia - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._avatar_full = None
        self._avatar_medium = None
        self._avatar_small = None
        self.discriminator = None

        if avatar_full is not None:
            self.avatar_full = avatar_full
        if avatar_medium is not None:
            self.avatar_medium = avatar_medium
        if avatar_small is not None:
            self.avatar_small = avatar_small

    @property
    def avatar_full(self):
        """Gets the avatar_full of this ItemMedia.  # noqa: E501


        :return: The avatar_full of this ItemMedia.  # noqa: E501
        :rtype: str
        """
        return self._avatar_full

    @avatar_full.setter
    def avatar_full(self, avatar_full):
        """Sets the avatar_full of this ItemMedia.


        :param avatar_full: The avatar_full of this ItemMedia.  # noqa: E501
        :type: str
        """

        self._avatar_full = avatar_full

    @property
    def avatar_medium(self):
        """Gets the avatar_medium of this ItemMedia.  # noqa: E501


        :return: The avatar_medium of this ItemMedia.  # noqa: E501
        :rtype: str
        """
        return self._avatar_medium

    @avatar_medium.setter
    def avatar_medium(self, avatar_medium):
        """Sets the avatar_medium of this ItemMedia.


        :param avatar_medium: The avatar_medium of this ItemMedia.  # noqa: E501
        :type: str
        """

        self._avatar_medium = avatar_medium

    @property
    def avatar_small(self):
        """Gets the avatar_small of this ItemMedia.  # noqa: E501


        :return: The avatar_small of this ItemMedia.  # noqa: E501
        :rtype: str
        """
        return self._avatar_small

    @avatar_small.setter
    def avatar_small(self, avatar_small):
        """Sets the avatar_small of this ItemMedia.


        :param avatar_small: The avatar_small of this ItemMedia.  # noqa: E501
        :type: str
        """

        self._avatar_small = avatar_small

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemMedia, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemMedia):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemMedia):
            return True

        return self.to_dict() != other.to_dict()
