# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class ChampionshipSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coach': 'str',
        'coleader': 'str',
        'group': 'int',
        'leader': 'str',
        'roster': 'list[str]',
        'status': 'str',
        'substitutes': 'list[str]',
        'team': 'Team'
    }

    attribute_map = {
        'coach': 'coach',
        'coleader': 'coleader',
        'group': 'group',
        'leader': 'leader',
        'roster': 'roster',
        'status': 'status',
        'substitutes': 'substitutes',
        'team': 'team'
    }

    def __init__(self, coach=None, coleader=None, group=None, leader=None, roster=None, status=None, substitutes=None, team=None, _configuration=None):  # noqa: E501
        """ChampionshipSubscription - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._coach = None
        self._coleader = None
        self._group = None
        self._leader = None
        self._roster = None
        self._status = None
        self._substitutes = None
        self._team = None
        self.discriminator = None

        if coach is not None:
            self.coach = coach
        if coleader is not None:
            self.coleader = coleader
        if group is not None:
            self.group = group
        if leader is not None:
            self.leader = leader
        if roster is not None:
            self.roster = roster
        if status is not None:
            self.status = status
        if substitutes is not None:
            self.substitutes = substitutes
        if team is not None:
            self.team = team

    @property
    def coach(self):
        """Gets the coach of this ChampionshipSubscription.  # noqa: E501


        :return: The coach of this ChampionshipSubscription.  # noqa: E501
        :rtype: str
        """
        return self._coach

    @coach.setter
    def coach(self, coach):
        """Sets the coach of this ChampionshipSubscription.


        :param coach: The coach of this ChampionshipSubscription.  # noqa: E501
        :type: str
        """

        self._coach = coach

    @property
    def coleader(self):
        """Gets the coleader of this ChampionshipSubscription.  # noqa: E501


        :return: The coleader of this ChampionshipSubscription.  # noqa: E501
        :rtype: str
        """
        return self._coleader

    @coleader.setter
    def coleader(self, coleader):
        """Sets the coleader of this ChampionshipSubscription.


        :param coleader: The coleader of this ChampionshipSubscription.  # noqa: E501
        :type: str
        """

        self._coleader = coleader

    @property
    def group(self):
        """Gets the group of this ChampionshipSubscription.  # noqa: E501


        :return: The group of this ChampionshipSubscription.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ChampionshipSubscription.


        :param group: The group of this ChampionshipSubscription.  # noqa: E501
        :type: int
        """

        self._group = group

    @property
    def leader(self):
        """Gets the leader of this ChampionshipSubscription.  # noqa: E501


        :return: The leader of this ChampionshipSubscription.  # noqa: E501
        :rtype: str
        """
        return self._leader

    @leader.setter
    def leader(self, leader):
        """Sets the leader of this ChampionshipSubscription.


        :param leader: The leader of this ChampionshipSubscription.  # noqa: E501
        :type: str
        """

        self._leader = leader

    @property
    def roster(self):
        """Gets the roster of this ChampionshipSubscription.  # noqa: E501


        :return: The roster of this ChampionshipSubscription.  # noqa: E501
        :rtype: list[str]
        """
        return self._roster

    @roster.setter
    def roster(self, roster):
        """Sets the roster of this ChampionshipSubscription.


        :param roster: The roster of this ChampionshipSubscription.  # noqa: E501
        :type: list[str]
        """

        self._roster = roster

    @property
    def status(self):
        """Gets the status of this ChampionshipSubscription.  # noqa: E501


        :return: The status of this ChampionshipSubscription.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChampionshipSubscription.


        :param status: The status of this ChampionshipSubscription.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def substitutes(self):
        """Gets the substitutes of this ChampionshipSubscription.  # noqa: E501


        :return: The substitutes of this ChampionshipSubscription.  # noqa: E501
        :rtype: list[str]
        """
        return self._substitutes

    @substitutes.setter
    def substitutes(self, substitutes):
        """Sets the substitutes of this ChampionshipSubscription.


        :param substitutes: The substitutes of this ChampionshipSubscription.  # noqa: E501
        :type: list[str]
        """

        self._substitutes = substitutes

    @property
    def team(self):
        """Gets the team of this ChampionshipSubscription.  # noqa: E501


        :return: The team of this ChampionshipSubscription.  # noqa: E501
        :rtype: Team
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this ChampionshipSubscription.


        :param team: The team of this ChampionshipSubscription.  # noqa: E501
        :type: Team
        """

        self._team = team

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChampionshipSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChampionshipSubscription):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChampionshipSubscription):
            return True

        return self.to_dict() != other.to_dict()
