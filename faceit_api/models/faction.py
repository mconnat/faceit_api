# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Faction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avatar': 'str',
        'faction_id': 'str',
        'leader': 'str',
        'name': 'str',
        'roster': 'list[Roster]',
        'roster_v1': 'object',
        'stats': 'Stats',
        'substituted': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'avatar': 'avatar',
        'faction_id': 'faction_id',
        'leader': 'leader',
        'name': 'name',
        'roster': 'roster',
        'roster_v1': 'roster_v1',
        'stats': 'stats',
        'substituted': 'substituted',
        'type': 'type'
    }

    def __init__(self, avatar=None, faction_id=None, leader=None, name=None, roster=None, roster_v1=None, stats=None, substituted=None, type=None, _configuration=None):  # noqa: E501
        """Faction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._avatar = None
        self._faction_id = None
        self._leader = None
        self._name = None
        self._roster = None
        self._roster_v1 = None
        self._stats = None
        self._substituted = None
        self._type = None
        self.discriminator = None

        if avatar is not None:
            self.avatar = avatar
        if faction_id is not None:
            self.faction_id = faction_id
        if leader is not None:
            self.leader = leader
        if name is not None:
            self.name = name
        if roster is not None:
            self.roster = roster
        if roster_v1 is not None:
            self.roster_v1 = roster_v1
        if stats is not None:
            self.stats = stats
        if substituted is not None:
            self.substituted = substituted
        if type is not None:
            self.type = type

    @property
    def avatar(self):
        """Gets the avatar of this Faction.  # noqa: E501


        :return: The avatar of this Faction.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Faction.


        :param avatar: The avatar of this Faction.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def faction_id(self):
        """Gets the faction_id of this Faction.  # noqa: E501


        :return: The faction_id of this Faction.  # noqa: E501
        :rtype: str
        """
        return self._faction_id

    @faction_id.setter
    def faction_id(self, faction_id):
        """Sets the faction_id of this Faction.


        :param faction_id: The faction_id of this Faction.  # noqa: E501
        :type: str
        """

        self._faction_id = faction_id

    @property
    def leader(self):
        """Gets the leader of this Faction.  # noqa: E501


        :return: The leader of this Faction.  # noqa: E501
        :rtype: str
        """
        return self._leader

    @leader.setter
    def leader(self, leader):
        """Sets the leader of this Faction.


        :param leader: The leader of this Faction.  # noqa: E501
        :type: str
        """

        self._leader = leader

    @property
    def name(self):
        """Gets the name of this Faction.  # noqa: E501


        :return: The name of this Faction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Faction.


        :param name: The name of this Faction.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def roster(self):
        """Gets the roster of this Faction.  # noqa: E501


        :return: The roster of this Faction.  # noqa: E501
        :rtype: list[Roster]
        """
        return self._roster

    @roster.setter
    def roster(self, roster):
        """Sets the roster of this Faction.


        :param roster: The roster of this Faction.  # noqa: E501
        :type: list[Roster]
        """

        self._roster = roster

    @property
    def roster_v1(self):
        """Gets the roster_v1 of this Faction.  # noqa: E501


        :return: The roster_v1 of this Faction.  # noqa: E501
        :rtype: object
        """
        return self._roster_v1

    @roster_v1.setter
    def roster_v1(self, roster_v1):
        """Sets the roster_v1 of this Faction.


        :param roster_v1: The roster_v1 of this Faction.  # noqa: E501
        :type: object
        """

        self._roster_v1 = roster_v1

    @property
    def stats(self):
        """Gets the stats of this Faction.  # noqa: E501


        :return: The stats of this Faction.  # noqa: E501
        :rtype: Stats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Faction.


        :param stats: The stats of this Faction.  # noqa: E501
        :type: Stats
        """

        self._stats = stats

    @property
    def substituted(self):
        """Gets the substituted of this Faction.  # noqa: E501


        :return: The substituted of this Faction.  # noqa: E501
        :rtype: bool
        """
        return self._substituted

    @substituted.setter
    def substituted(self, substituted):
        """Sets the substituted of this Faction.


        :param substituted: The substituted of this Faction.  # noqa: E501
        :type: bool
        """

        self._substituted = substituted

    @property
    def type(self):
        """Gets the type of this Faction.  # noqa: E501


        :return: The type of this Faction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Faction.


        :param type: The type of this Faction.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Faction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Faction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Faction):
            return True

        return self.to_dict() != other.to_dict()
