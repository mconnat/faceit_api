# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class TournamentTeam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nickname': 'str',
        'skill_level': 'int',
        'subs_done': 'int',
        'team_id': 'str',
        'team_leader': 'str',
        'team_type': 'str'
    }

    attribute_map = {
        'nickname': 'nickname',
        'skill_level': 'skill_level',
        'subs_done': 'subs_done',
        'team_id': 'team_id',
        'team_leader': 'team_leader',
        'team_type': 'team_type'
    }

    def __init__(self, nickname=None, skill_level=None, subs_done=None, team_id=None, team_leader=None, team_type=None, _configuration=None):  # noqa: E501
        """TournamentTeam - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._nickname = None
        self._skill_level = None
        self._subs_done = None
        self._team_id = None
        self._team_leader = None
        self._team_type = None
        self.discriminator = None

        if nickname is not None:
            self.nickname = nickname
        if skill_level is not None:
            self.skill_level = skill_level
        if subs_done is not None:
            self.subs_done = subs_done
        if team_id is not None:
            self.team_id = team_id
        if team_leader is not None:
            self.team_leader = team_leader
        if team_type is not None:
            self.team_type = team_type

    @property
    def nickname(self):
        """Gets the nickname of this TournamentTeam.  # noqa: E501


        :return: The nickname of this TournamentTeam.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this TournamentTeam.


        :param nickname: The nickname of this TournamentTeam.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def skill_level(self):
        """Gets the skill_level of this TournamentTeam.  # noqa: E501


        :return: The skill_level of this TournamentTeam.  # noqa: E501
        :rtype: int
        """
        return self._skill_level

    @skill_level.setter
    def skill_level(self, skill_level):
        """Sets the skill_level of this TournamentTeam.


        :param skill_level: The skill_level of this TournamentTeam.  # noqa: E501
        :type: int
        """

        self._skill_level = skill_level

    @property
    def subs_done(self):
        """Gets the subs_done of this TournamentTeam.  # noqa: E501


        :return: The subs_done of this TournamentTeam.  # noqa: E501
        :rtype: int
        """
        return self._subs_done

    @subs_done.setter
    def subs_done(self, subs_done):
        """Sets the subs_done of this TournamentTeam.


        :param subs_done: The subs_done of this TournamentTeam.  # noqa: E501
        :type: int
        """

        self._subs_done = subs_done

    @property
    def team_id(self):
        """Gets the team_id of this TournamentTeam.  # noqa: E501


        :return: The team_id of this TournamentTeam.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this TournamentTeam.


        :param team_id: The team_id of this TournamentTeam.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def team_leader(self):
        """Gets the team_leader of this TournamentTeam.  # noqa: E501


        :return: The team_leader of this TournamentTeam.  # noqa: E501
        :rtype: str
        """
        return self._team_leader

    @team_leader.setter
    def team_leader(self, team_leader):
        """Sets the team_leader of this TournamentTeam.


        :param team_leader: The team_leader of this TournamentTeam.  # noqa: E501
        :type: str
        """

        self._team_leader = team_leader

    @property
    def team_type(self):
        """Gets the team_type of this TournamentTeam.  # noqa: E501


        :return: The team_type of this TournamentTeam.  # noqa: E501
        :rtype: str
        """
        return self._team_type

    @team_type.setter
    def team_type(self, team_type):
        """Sets the team_type of this TournamentTeam.


        :param team_type: The team_type of this TournamentTeam.  # noqa: E501
        :type: str
        """

        self._team_type = team_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TournamentTeam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TournamentTeam):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TournamentTeam):
            return True

        return self.to_dict() != other.to_dict()
