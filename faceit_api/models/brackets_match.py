# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class BracketsMatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'faceit_url': 'str',
        'match_id': 'str',
        'position': 'int',
        'results': 'MatchResult',
        'round': 'int',
        'state': 'str',
        'teams': 'dict(str, BracketsFaction)'
    }

    attribute_map = {
        'faceit_url': 'faceit_url',
        'match_id': 'match_id',
        'position': 'position',
        'results': 'results',
        'round': 'round',
        'state': 'state',
        'teams': 'teams'
    }

    def __init__(self, faceit_url=None, match_id=None, position=None, results=None, round=None, state=None, teams=None, _configuration=None):  # noqa: E501
        """BracketsMatch - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._faceit_url = None
        self._match_id = None
        self._position = None
        self._results = None
        self._round = None
        self._state = None
        self._teams = None
        self.discriminator = None

        if faceit_url is not None:
            self.faceit_url = faceit_url
        if match_id is not None:
            self.match_id = match_id
        if position is not None:
            self.position = position
        if results is not None:
            self.results = results
        if round is not None:
            self.round = round
        if state is not None:
            self.state = state
        if teams is not None:
            self.teams = teams

    @property
    def faceit_url(self):
        """Gets the faceit_url of this BracketsMatch.  # noqa: E501


        :return: The faceit_url of this BracketsMatch.  # noqa: E501
        :rtype: str
        """
        return self._faceit_url

    @faceit_url.setter
    def faceit_url(self, faceit_url):
        """Sets the faceit_url of this BracketsMatch.


        :param faceit_url: The faceit_url of this BracketsMatch.  # noqa: E501
        :type: str
        """

        self._faceit_url = faceit_url

    @property
    def match_id(self):
        """Gets the match_id of this BracketsMatch.  # noqa: E501


        :return: The match_id of this BracketsMatch.  # noqa: E501
        :rtype: str
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this BracketsMatch.


        :param match_id: The match_id of this BracketsMatch.  # noqa: E501
        :type: str
        """

        self._match_id = match_id

    @property
    def position(self):
        """Gets the position of this BracketsMatch.  # noqa: E501


        :return: The position of this BracketsMatch.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BracketsMatch.


        :param position: The position of this BracketsMatch.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def results(self):
        """Gets the results of this BracketsMatch.  # noqa: E501


        :return: The results of this BracketsMatch.  # noqa: E501
        :rtype: MatchResult
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this BracketsMatch.


        :param results: The results of this BracketsMatch.  # noqa: E501
        :type: MatchResult
        """

        self._results = results

    @property
    def round(self):
        """Gets the round of this BracketsMatch.  # noqa: E501


        :return: The round of this BracketsMatch.  # noqa: E501
        :rtype: int
        """
        return self._round

    @round.setter
    def round(self, round):
        """Sets the round of this BracketsMatch.


        :param round: The round of this BracketsMatch.  # noqa: E501
        :type: int
        """

        self._round = round

    @property
    def state(self):
        """Gets the state of this BracketsMatch.  # noqa: E501


        :return: The state of this BracketsMatch.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BracketsMatch.


        :param state: The state of this BracketsMatch.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def teams(self):
        """Gets the teams of this BracketsMatch.  # noqa: E501


        :return: The teams of this BracketsMatch.  # noqa: E501
        :rtype: dict(str, BracketsFaction)
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this BracketsMatch.


        :param teams: The teams of this BracketsMatch.  # noqa: E501
        :type: dict(str, BracketsFaction)
        """

        self._teams = teams

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BracketsMatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BracketsMatch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BracketsMatch):
            return True

        return self.to_dict() != other.to_dict()
