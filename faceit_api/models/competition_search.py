# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class CompetitionSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'competition_id': 'str',
        'competition_type': 'str',
        'game': 'str',
        'name': 'str',
        'number_of_members': 'int',
        'organizer_id': 'str',
        'organizer_name': 'str',
        'organizer_type': 'str',
        'players_checkedin': 'int',
        'players_joined': 'int',
        'prize_type': 'str',
        'region': 'str',
        'slots': 'int',
        'started_at': 'int',
        'status': 'str',
        'total_prize': 'str'
    }

    attribute_map = {
        'competition_id': 'competition_id',
        'competition_type': 'competition_type',
        'game': 'game',
        'name': 'name',
        'number_of_members': 'number_of_members',
        'organizer_id': 'organizer_id',
        'organizer_name': 'organizer_name',
        'organizer_type': 'organizer_type',
        'players_checkedin': 'players_checkedin',
        'players_joined': 'players_joined',
        'prize_type': 'prize_type',
        'region': 'region',
        'slots': 'slots',
        'started_at': 'started_at',
        'status': 'status',
        'total_prize': 'total_prize'
    }

    def __init__(self, competition_id=None, competition_type=None, game=None, name=None, number_of_members=None, organizer_id=None, organizer_name=None, organizer_type=None, players_checkedin=None, players_joined=None, prize_type=None, region=None, slots=None, started_at=None, status=None, total_prize=None, _configuration=None):  # noqa: E501
        """CompetitionSearch - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._competition_id = None
        self._competition_type = None
        self._game = None
        self._name = None
        self._number_of_members = None
        self._organizer_id = None
        self._organizer_name = None
        self._organizer_type = None
        self._players_checkedin = None
        self._players_joined = None
        self._prize_type = None
        self._region = None
        self._slots = None
        self._started_at = None
        self._status = None
        self._total_prize = None
        self.discriminator = None

        if competition_id is not None:
            self.competition_id = competition_id
        if competition_type is not None:
            self.competition_type = competition_type
        if game is not None:
            self.game = game
        if name is not None:
            self.name = name
        if number_of_members is not None:
            self.number_of_members = number_of_members
        if organizer_id is not None:
            self.organizer_id = organizer_id
        if organizer_name is not None:
            self.organizer_name = organizer_name
        if organizer_type is not None:
            self.organizer_type = organizer_type
        if players_checkedin is not None:
            self.players_checkedin = players_checkedin
        if players_joined is not None:
            self.players_joined = players_joined
        if prize_type is not None:
            self.prize_type = prize_type
        if region is not None:
            self.region = region
        if slots is not None:
            self.slots = slots
        if started_at is not None:
            self.started_at = started_at
        if status is not None:
            self.status = status
        if total_prize is not None:
            self.total_prize = total_prize

    @property
    def competition_id(self):
        """Gets the competition_id of this CompetitionSearch.  # noqa: E501


        :return: The competition_id of this CompetitionSearch.  # noqa: E501
        :rtype: str
        """
        return self._competition_id

    @competition_id.setter
    def competition_id(self, competition_id):
        """Sets the competition_id of this CompetitionSearch.


        :param competition_id: The competition_id of this CompetitionSearch.  # noqa: E501
        :type: str
        """

        self._competition_id = competition_id

    @property
    def competition_type(self):
        """Gets the competition_type of this CompetitionSearch.  # noqa: E501


        :return: The competition_type of this CompetitionSearch.  # noqa: E501
        :rtype: str
        """
        return self._competition_type

    @competition_type.setter
    def competition_type(self, competition_type):
        """Sets the competition_type of this CompetitionSearch.


        :param competition_type: The competition_type of this CompetitionSearch.  # noqa: E501
        :type: str
        """

        self._competition_type = competition_type

    @property
    def game(self):
        """Gets the game of this CompetitionSearch.  # noqa: E501


        :return: The game of this CompetitionSearch.  # noqa: E501
        :rtype: str
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this CompetitionSearch.


        :param game: The game of this CompetitionSearch.  # noqa: E501
        :type: str
        """

        self._game = game

    @property
    def name(self):
        """Gets the name of this CompetitionSearch.  # noqa: E501


        :return: The name of this CompetitionSearch.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompetitionSearch.


        :param name: The name of this CompetitionSearch.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_members(self):
        """Gets the number_of_members of this CompetitionSearch.  # noqa: E501


        :return: The number_of_members of this CompetitionSearch.  # noqa: E501
        :rtype: int
        """
        return self._number_of_members

    @number_of_members.setter
    def number_of_members(self, number_of_members):
        """Sets the number_of_members of this CompetitionSearch.


        :param number_of_members: The number_of_members of this CompetitionSearch.  # noqa: E501
        :type: int
        """

        self._number_of_members = number_of_members

    @property
    def organizer_id(self):
        """Gets the organizer_id of this CompetitionSearch.  # noqa: E501


        :return: The organizer_id of this CompetitionSearch.  # noqa: E501
        :rtype: str
        """
        return self._organizer_id

    @organizer_id.setter
    def organizer_id(self, organizer_id):
        """Sets the organizer_id of this CompetitionSearch.


        :param organizer_id: The organizer_id of this CompetitionSearch.  # noqa: E501
        :type: str
        """

        self._organizer_id = organizer_id

    @property
    def organizer_name(self):
        """Gets the organizer_name of this CompetitionSearch.  # noqa: E501


        :return: The organizer_name of this CompetitionSearch.  # noqa: E501
        :rtype: str
        """
        return self._organizer_name

    @organizer_name.setter
    def organizer_name(self, organizer_name):
        """Sets the organizer_name of this CompetitionSearch.


        :param organizer_name: The organizer_name of this CompetitionSearch.  # noqa: E501
        :type: str
        """

        self._organizer_name = organizer_name

    @property
    def organizer_type(self):
        """Gets the organizer_type of this CompetitionSearch.  # noqa: E501


        :return: The organizer_type of this CompetitionSearch.  # noqa: E501
        :rtype: str
        """
        return self._organizer_type

    @organizer_type.setter
    def organizer_type(self, organizer_type):
        """Sets the organizer_type of this CompetitionSearch.


        :param organizer_type: The organizer_type of this CompetitionSearch.  # noqa: E501
        :type: str
        """

        self._organizer_type = organizer_type

    @property
    def players_checkedin(self):
        """Gets the players_checkedin of this CompetitionSearch.  # noqa: E501


        :return: The players_checkedin of this CompetitionSearch.  # noqa: E501
        :rtype: int
        """
        return self._players_checkedin

    @players_checkedin.setter
    def players_checkedin(self, players_checkedin):
        """Sets the players_checkedin of this CompetitionSearch.


        :param players_checkedin: The players_checkedin of this CompetitionSearch.  # noqa: E501
        :type: int
        """

        self._players_checkedin = players_checkedin

    @property
    def players_joined(self):
        """Gets the players_joined of this CompetitionSearch.  # noqa: E501


        :return: The players_joined of this CompetitionSearch.  # noqa: E501
        :rtype: int
        """
        return self._players_joined

    @players_joined.setter
    def players_joined(self, players_joined):
        """Sets the players_joined of this CompetitionSearch.


        :param players_joined: The players_joined of this CompetitionSearch.  # noqa: E501
        :type: int
        """

        self._players_joined = players_joined

    @property
    def prize_type(self):
        """Gets the prize_type of this CompetitionSearch.  # noqa: E501

        Tournaments  # noqa: E501

        :return: The prize_type of this CompetitionSearch.  # noqa: E501
        :rtype: str
        """
        return self._prize_type

    @prize_type.setter
    def prize_type(self, prize_type):
        """Sets the prize_type of this CompetitionSearch.

        Tournaments  # noqa: E501

        :param prize_type: The prize_type of this CompetitionSearch.  # noqa: E501
        :type: str
        """

        self._prize_type = prize_type

    @property
    def region(self):
        """Gets the region of this CompetitionSearch.  # noqa: E501


        :return: The region of this CompetitionSearch.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CompetitionSearch.


        :param region: The region of this CompetitionSearch.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def slots(self):
        """Gets the slots of this CompetitionSearch.  # noqa: E501

        Hubs  # noqa: E501

        :return: The slots of this CompetitionSearch.  # noqa: E501
        :rtype: int
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this CompetitionSearch.

        Hubs  # noqa: E501

        :param slots: The slots of this CompetitionSearch.  # noqa: E501
        :type: int
        """

        self._slots = slots

    @property
    def started_at(self):
        """Gets the started_at of this CompetitionSearch.  # noqa: E501


        :return: The started_at of this CompetitionSearch.  # noqa: E501
        :rtype: int
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this CompetitionSearch.


        :param started_at: The started_at of this CompetitionSearch.  # noqa: E501
        :type: int
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this CompetitionSearch.  # noqa: E501


        :return: The status of this CompetitionSearch.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CompetitionSearch.


        :param status: The status of this CompetitionSearch.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def total_prize(self):
        """Gets the total_prize of this CompetitionSearch.  # noqa: E501


        :return: The total_prize of this CompetitionSearch.  # noqa: E501
        :rtype: str
        """
        return self._total_prize

    @total_prize.setter
    def total_prize(self, total_prize):
        """Sets the total_prize of this CompetitionSearch.


        :param total_prize: The total_prize of this CompetitionSearch.  # noqa: E501
        :type: str
        """

        self._total_prize = total_prize

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompetitionSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompetitionSearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompetitionSearch):
            return True

        return self.to_dict() != other.to_dict()
