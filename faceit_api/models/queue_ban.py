# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class QueueBan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ban_end': 'datetime',
        'ban_id': 'str',
        'ban_start': 'datetime',
        'created_at': 'datetime',
        'entity_id': 'str',
        'entity_type': 'str',
        'expired': 'bool',
        'last_modified': 'datetime',
        'nickname': 'str',
        'organizer_id': 'str',
        'queue_id': 'str',
        'reason': 'str',
        'type': 'str',
        'user_id': 'str',
        'version': 'int'
    }

    attribute_map = {
        'ban_end': 'banEnd',
        'ban_id': 'banId',
        'ban_start': 'banStart',
        'created_at': 'createdAt',
        'entity_id': 'entityId',
        'entity_type': 'entityType',
        'expired': 'expired',
        'last_modified': 'lastModified',
        'nickname': 'nickname',
        'organizer_id': 'organizerId',
        'queue_id': 'queueId',
        'reason': 'reason',
        'type': 'type',
        'user_id': 'userId',
        'version': 'version'
    }

    def __init__(self, ban_end=None, ban_id=None, ban_start=None, created_at=None, entity_id=None, entity_type=None, expired=None, last_modified=None, nickname=None, organizer_id=None, queue_id=None, reason=None, type=None, user_id=None, version=None, _configuration=None):  # noqa: E501
        """QueueBan - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ban_end = None
        self._ban_id = None
        self._ban_start = None
        self._created_at = None
        self._entity_id = None
        self._entity_type = None
        self._expired = None
        self._last_modified = None
        self._nickname = None
        self._organizer_id = None
        self._queue_id = None
        self._reason = None
        self._type = None
        self._user_id = None
        self._version = None
        self.discriminator = None

        if ban_end is not None:
            self.ban_end = ban_end
        if ban_id is not None:
            self.ban_id = ban_id
        if ban_start is not None:
            self.ban_start = ban_start
        if created_at is not None:
            self.created_at = created_at
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_type is not None:
            self.entity_type = entity_type
        if expired is not None:
            self.expired = expired
        if last_modified is not None:
            self.last_modified = last_modified
        if nickname is not None:
            self.nickname = nickname
        if organizer_id is not None:
            self.organizer_id = organizer_id
        if queue_id is not None:
            self.queue_id = queue_id
        if reason is not None:
            self.reason = reason
        if type is not None:
            self.type = type
        if user_id is not None:
            self.user_id = user_id
        if version is not None:
            self.version = version

    @property
    def ban_end(self):
        """Gets the ban_end of this QueueBan.  # noqa: E501


        :return: The ban_end of this QueueBan.  # noqa: E501
        :rtype: datetime
        """
        return self._ban_end

    @ban_end.setter
    def ban_end(self, ban_end):
        """Sets the ban_end of this QueueBan.


        :param ban_end: The ban_end of this QueueBan.  # noqa: E501
        :type: datetime
        """

        self._ban_end = ban_end

    @property
    def ban_id(self):
        """Gets the ban_id of this QueueBan.  # noqa: E501


        :return: The ban_id of this QueueBan.  # noqa: E501
        :rtype: str
        """
        return self._ban_id

    @ban_id.setter
    def ban_id(self, ban_id):
        """Sets the ban_id of this QueueBan.


        :param ban_id: The ban_id of this QueueBan.  # noqa: E501
        :type: str
        """

        self._ban_id = ban_id

    @property
    def ban_start(self):
        """Gets the ban_start of this QueueBan.  # noqa: E501


        :return: The ban_start of this QueueBan.  # noqa: E501
        :rtype: datetime
        """
        return self._ban_start

    @ban_start.setter
    def ban_start(self, ban_start):
        """Sets the ban_start of this QueueBan.


        :param ban_start: The ban_start of this QueueBan.  # noqa: E501
        :type: datetime
        """

        self._ban_start = ban_start

    @property
    def created_at(self):
        """Gets the created_at of this QueueBan.  # noqa: E501


        :return: The created_at of this QueueBan.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this QueueBan.


        :param created_at: The created_at of this QueueBan.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def entity_id(self):
        """Gets the entity_id of this QueueBan.  # noqa: E501


        :return: The entity_id of this QueueBan.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this QueueBan.


        :param entity_id: The entity_id of this QueueBan.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this QueueBan.  # noqa: E501


        :return: The entity_type of this QueueBan.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this QueueBan.


        :param entity_type: The entity_type of this QueueBan.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def expired(self):
        """Gets the expired of this QueueBan.  # noqa: E501


        :return: The expired of this QueueBan.  # noqa: E501
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this QueueBan.


        :param expired: The expired of this QueueBan.  # noqa: E501
        :type: bool
        """

        self._expired = expired

    @property
    def last_modified(self):
        """Gets the last_modified of this QueueBan.  # noqa: E501


        :return: The last_modified of this QueueBan.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this QueueBan.


        :param last_modified: The last_modified of this QueueBan.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def nickname(self):
        """Gets the nickname of this QueueBan.  # noqa: E501


        :return: The nickname of this QueueBan.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this QueueBan.


        :param nickname: The nickname of this QueueBan.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def organizer_id(self):
        """Gets the organizer_id of this QueueBan.  # noqa: E501


        :return: The organizer_id of this QueueBan.  # noqa: E501
        :rtype: str
        """
        return self._organizer_id

    @organizer_id.setter
    def organizer_id(self, organizer_id):
        """Sets the organizer_id of this QueueBan.


        :param organizer_id: The organizer_id of this QueueBan.  # noqa: E501
        :type: str
        """

        self._organizer_id = organizer_id

    @property
    def queue_id(self):
        """Gets the queue_id of this QueueBan.  # noqa: E501


        :return: The queue_id of this QueueBan.  # noqa: E501
        :rtype: str
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id):
        """Sets the queue_id of this QueueBan.


        :param queue_id: The queue_id of this QueueBan.  # noqa: E501
        :type: str
        """

        self._queue_id = queue_id

    @property
    def reason(self):
        """Gets the reason of this QueueBan.  # noqa: E501


        :return: The reason of this QueueBan.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this QueueBan.


        :param reason: The reason of this QueueBan.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def type(self):
        """Gets the type of this QueueBan.  # noqa: E501


        :return: The type of this QueueBan.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QueueBan.


        :param type: The type of this QueueBan.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this QueueBan.  # noqa: E501


        :return: The user_id of this QueueBan.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this QueueBan.


        :param user_id: The user_id of this QueueBan.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def version(self):
        """Gets the version of this QueueBan.  # noqa: E501


        :return: The version of this QueueBan.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this QueueBan.


        :param version: The version of this QueueBan.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueueBan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueueBan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueueBan):
            return True

        return self.to_dict() != other.to_dict()
