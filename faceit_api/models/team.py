# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Team(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avatar': 'str',
        'chat_room_id': 'str',
        'cover_image': 'str',
        'description': 'str',
        'facebook': 'str',
        'faceit_url': 'str',
        'game': 'str',
        'leader': 'str',
        'members': 'list[UserSimple]',
        'name': 'str',
        'nickname': 'str',
        'team_id': 'str',
        'team_type': 'str',
        'twitter': 'str',
        'website': 'str',
        'youtube': 'str'
    }

    attribute_map = {
        'avatar': 'avatar',
        'chat_room_id': 'chat_room_id',
        'cover_image': 'cover_image',
        'description': 'description',
        'facebook': 'facebook',
        'faceit_url': 'faceit_url',
        'game': 'game',
        'leader': 'leader',
        'members': 'members',
        'name': 'name',
        'nickname': 'nickname',
        'team_id': 'team_id',
        'team_type': 'team_type',
        'twitter': 'twitter',
        'website': 'website',
        'youtube': 'youtube'
    }

    def __init__(self, avatar=None, chat_room_id=None, cover_image=None, description=None, facebook=None, faceit_url=None, game=None, leader=None, members=None, name=None, nickname=None, team_id=None, team_type=None, twitter=None, website=None, youtube=None, _configuration=None):  # noqa: E501
        """Team - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._avatar = None
        self._chat_room_id = None
        self._cover_image = None
        self._description = None
        self._facebook = None
        self._faceit_url = None
        self._game = None
        self._leader = None
        self._members = None
        self._name = None
        self._nickname = None
        self._team_id = None
        self._team_type = None
        self._twitter = None
        self._website = None
        self._youtube = None
        self.discriminator = None

        if avatar is not None:
            self.avatar = avatar
        if chat_room_id is not None:
            self.chat_room_id = chat_room_id
        if cover_image is not None:
            self.cover_image = cover_image
        if description is not None:
            self.description = description
        if facebook is not None:
            self.facebook = facebook
        if faceit_url is not None:
            self.faceit_url = faceit_url
        if game is not None:
            self.game = game
        if leader is not None:
            self.leader = leader
        if members is not None:
            self.members = members
        if name is not None:
            self.name = name
        if nickname is not None:
            self.nickname = nickname
        if team_id is not None:
            self.team_id = team_id
        if team_type is not None:
            self.team_type = team_type
        if twitter is not None:
            self.twitter = twitter
        if website is not None:
            self.website = website
        if youtube is not None:
            self.youtube = youtube

    @property
    def avatar(self):
        """Gets the avatar of this Team.  # noqa: E501

        The Avatar of a team  # noqa: E501

        :return: The avatar of this Team.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Team.

        The Avatar of a team  # noqa: E501

        :param avatar: The avatar of this Team.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def chat_room_id(self):
        """Gets the chat_room_id of this Team.  # noqa: E501

        The ChatID of a team  # noqa: E501

        :return: The chat_room_id of this Team.  # noqa: E501
        :rtype: str
        """
        return self._chat_room_id

    @chat_room_id.setter
    def chat_room_id(self, chat_room_id):
        """Sets the chat_room_id of this Team.

        The ChatID of a team  # noqa: E501

        :param chat_room_id: The chat_room_id of this Team.  # noqa: E501
        :type: str
        """

        self._chat_room_id = chat_room_id

    @property
    def cover_image(self):
        """Gets the cover_image of this Team.  # noqa: E501

        The CoverImage of a team  # noqa: E501

        :return: The cover_image of this Team.  # noqa: E501
        :rtype: str
        """
        return self._cover_image

    @cover_image.setter
    def cover_image(self, cover_image):
        """Sets the cover_image of this Team.

        The CoverImage of a team  # noqa: E501

        :param cover_image: The cover_image of this Team.  # noqa: E501
        :type: str
        """

        self._cover_image = cover_image

    @property
    def description(self):
        """Gets the description of this Team.  # noqa: E501

        The Description of a team  # noqa: E501

        :return: The description of this Team.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Team.

        The Description of a team  # noqa: E501

        :param description: The description of this Team.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def facebook(self):
        """Gets the facebook of this Team.  # noqa: E501

        The Facebook of a team  # noqa: E501

        :return: The facebook of this Team.  # noqa: E501
        :rtype: str
        """
        return self._facebook

    @facebook.setter
    def facebook(self, facebook):
        """Sets the facebook of this Team.

        The Facebook of a team  # noqa: E501

        :param facebook: The facebook of this Team.  # noqa: E501
        :type: str
        """

        self._facebook = facebook

    @property
    def faceit_url(self):
        """Gets the faceit_url of this Team.  # noqa: E501

        The FaceitUrl of a team  # noqa: E501

        :return: The faceit_url of this Team.  # noqa: E501
        :rtype: str
        """
        return self._faceit_url

    @faceit_url.setter
    def faceit_url(self, faceit_url):
        """Sets the faceit_url of this Team.

        The FaceitUrl of a team  # noqa: E501

        :param faceit_url: The faceit_url of this Team.  # noqa: E501
        :type: str
        """

        self._faceit_url = faceit_url

    @property
    def game(self):
        """Gets the game of this Team.  # noqa: E501

        The Game of a team  # noqa: E501

        :return: The game of this Team.  # noqa: E501
        :rtype: str
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this Team.

        The Game of a team  # noqa: E501

        :param game: The game of this Team.  # noqa: E501
        :type: str
        """

        self._game = game

    @property
    def leader(self):
        """Gets the leader of this Team.  # noqa: E501

        The Leader of a team  # noqa: E501

        :return: The leader of this Team.  # noqa: E501
        :rtype: str
        """
        return self._leader

    @leader.setter
    def leader(self, leader):
        """Sets the leader of this Team.

        The Leader of a team  # noqa: E501

        :param leader: The leader of this Team.  # noqa: E501
        :type: str
        """

        self._leader = leader

    @property
    def members(self):
        """Gets the members of this Team.  # noqa: E501

        The Members of a team  Can be empty if not supported  # noqa: E501

        :return: The members of this Team.  # noqa: E501
        :rtype: list[UserSimple]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Team.

        The Members of a team  Can be empty if not supported  # noqa: E501

        :param members: The members of this Team.  # noqa: E501
        :type: list[UserSimple]
        """

        self._members = members

    @property
    def name(self):
        """Gets the name of this Team.  # noqa: E501

        The Name of a team  # noqa: E501

        :return: The name of this Team.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.

        The Name of a team  # noqa: E501

        :param name: The name of this Team.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nickname(self):
        """Gets the nickname of this Team.  # noqa: E501

        The Nickname of a team  # noqa: E501

        :return: The nickname of this Team.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this Team.

        The Nickname of a team  # noqa: E501

        :param nickname: The nickname of this Team.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def team_id(self):
        """Gets the team_id of this Team.  # noqa: E501

        The ID of a team  # noqa: E501

        :return: The team_id of this Team.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this Team.

        The ID of a team  # noqa: E501

        :param team_id: The team_id of this Team.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def team_type(self):
        """Gets the team_type of this Team.  # noqa: E501

        The TeamType of a team  # noqa: E501

        :return: The team_type of this Team.  # noqa: E501
        :rtype: str
        """
        return self._team_type

    @team_type.setter
    def team_type(self, team_type):
        """Sets the team_type of this Team.

        The TeamType of a team  # noqa: E501

        :param team_type: The team_type of this Team.  # noqa: E501
        :type: str
        """

        self._team_type = team_type

    @property
    def twitter(self):
        """Gets the twitter of this Team.  # noqa: E501

        The Twitter of a team  # noqa: E501

        :return: The twitter of this Team.  # noqa: E501
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this Team.

        The Twitter of a team  # noqa: E501

        :param twitter: The twitter of this Team.  # noqa: E501
        :type: str
        """

        self._twitter = twitter

    @property
    def website(self):
        """Gets the website of this Team.  # noqa: E501

        The Website of a team  # noqa: E501

        :return: The website of this Team.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Team.

        The Website of a team  # noqa: E501

        :param website: The website of this Team.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def youtube(self):
        """Gets the youtube of this Team.  # noqa: E501

        The Youtube of a team  # noqa: E501

        :return: The youtube of this Team.  # noqa: E501
        :rtype: str
        """
        return self._youtube

    @youtube.setter
    def youtube(self, youtube):
        """Sets the youtube of this Team.

        The Youtube of a team  # noqa: E501

        :param youtube: The youtube of this Team.  # noqa: E501
        :type: str
        """

        self._youtube = youtube

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Team, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Team):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Team):
            return True

        return self.to_dict() != other.to_dict()
