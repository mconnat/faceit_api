# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class League(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'divisions': 'list[Division]',
        'game': 'str',
        'id': 'str',
        'min_matches': 'int',
        'region': 'str',
        'season': 'Season'
    }

    attribute_map = {
        'divisions': 'divisions',
        'game': 'game',
        'id': 'id',
        'min_matches': 'min_matches',
        'region': 'region',
        'season': 'season'
    }

    def __init__(self, divisions=None, game=None, id=None, min_matches=None, region=None, season=None, _configuration=None):  # noqa: E501
        """League - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._divisions = None
        self._game = None
        self._id = None
        self._min_matches = None
        self._region = None
        self._season = None
        self.discriminator = None

        if divisions is not None:
            self.divisions = divisions
        if game is not None:
            self.game = game
        if id is not None:
            self.id = id
        if min_matches is not None:
            self.min_matches = min_matches
        if region is not None:
            self.region = region
        if season is not None:
            self.season = season

    @property
    def divisions(self):
        """Gets the divisions of this League.  # noqa: E501

        The divisions of the league.  # noqa: E501

        :return: The divisions of this League.  # noqa: E501
        :rtype: list[Division]
        """
        return self._divisions

    @divisions.setter
    def divisions(self, divisions):
        """Sets the divisions of this League.

        The divisions of the league.  # noqa: E501

        :param divisions: The divisions of this League.  # noqa: E501
        :type: list[Division]
        """

        self._divisions = divisions

    @property
    def game(self):
        """Gets the game of this League.  # noqa: E501

        The game of the league.  # noqa: E501

        :return: The game of this League.  # noqa: E501
        :rtype: str
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this League.

        The game of the league.  # noqa: E501

        :param game: The game of this League.  # noqa: E501
        :type: str
        """

        self._game = game

    @property
    def id(self):
        """Gets the id of this League.  # noqa: E501

        The id of the league.  # noqa: E501

        :return: The id of this League.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this League.

        The id of the league.  # noqa: E501

        :param id: The id of this League.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def min_matches(self):
        """Gets the min_matches of this League.  # noqa: E501

        The minimum matches of the league.  # noqa: E501

        :return: The min_matches of this League.  # noqa: E501
        :rtype: int
        """
        return self._min_matches

    @min_matches.setter
    def min_matches(self, min_matches):
        """Sets the min_matches of this League.

        The minimum matches of the league.  # noqa: E501

        :param min_matches: The min_matches of this League.  # noqa: E501
        :type: int
        """

        self._min_matches = min_matches

    @property
    def region(self):
        """Gets the region of this League.  # noqa: E501

        The region of the league.  # noqa: E501

        :return: The region of this League.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this League.

        The region of the league.  # noqa: E501

        :param region: The region of this League.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def season(self):
        """Gets the season of this League.  # noqa: E501


        :return: The season of this League.  # noqa: E501
        :rtype: Season
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this League.


        :param season: The season of this League.  # noqa: E501
        :type: Season
        """

        self._season = season

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(League, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, League):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, League):
            return True

        return self.to_dict() != other.to_dict()
