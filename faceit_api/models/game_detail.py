# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class GameDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'faceit_elo': 'int',
        'game_player_id': 'str',
        'game_player_name': 'str',
        'game_profile_id': 'str',
        'region': 'str',
        'regions': 'object',
        'skill_level': 'int',
        'skill_level_label': 'str'
    }

    attribute_map = {
        'faceit_elo': 'faceit_elo',
        'game_player_id': 'game_player_id',
        'game_player_name': 'game_player_name',
        'game_profile_id': 'game_profile_id',
        'region': 'region',
        'regions': 'regions',
        'skill_level': 'skill_level',
        'skill_level_label': 'skill_level_label'
    }

    def __init__(self, faceit_elo=None, game_player_id=None, game_player_name=None, game_profile_id=None, region=None, regions=None, skill_level=None, skill_level_label=None, _configuration=None):  # noqa: E501
        """GameDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._faceit_elo = None
        self._game_player_id = None
        self._game_player_name = None
        self._game_profile_id = None
        self._region = None
        self._regions = None
        self._skill_level = None
        self._skill_level_label = None
        self.discriminator = None

        if faceit_elo is not None:
            self.faceit_elo = faceit_elo
        if game_player_id is not None:
            self.game_player_id = game_player_id
        if game_player_name is not None:
            self.game_player_name = game_player_name
        if game_profile_id is not None:
            self.game_profile_id = game_profile_id
        if region is not None:
            self.region = region
        if regions is not None:
            self.regions = regions
        if skill_level is not None:
            self.skill_level = skill_level
        if skill_level_label is not None:
            self.skill_level_label = skill_level_label

    @property
    def faceit_elo(self):
        """Gets the faceit_elo of this GameDetail.  # noqa: E501


        :return: The faceit_elo of this GameDetail.  # noqa: E501
        :rtype: int
        """
        return self._faceit_elo

    @faceit_elo.setter
    def faceit_elo(self, faceit_elo):
        """Sets the faceit_elo of this GameDetail.


        :param faceit_elo: The faceit_elo of this GameDetail.  # noqa: E501
        :type: int
        """

        self._faceit_elo = faceit_elo

    @property
    def game_player_id(self):
        """Gets the game_player_id of this GameDetail.  # noqa: E501


        :return: The game_player_id of this GameDetail.  # noqa: E501
        :rtype: str
        """
        return self._game_player_id

    @game_player_id.setter
    def game_player_id(self, game_player_id):
        """Sets the game_player_id of this GameDetail.


        :param game_player_id: The game_player_id of this GameDetail.  # noqa: E501
        :type: str
        """

        self._game_player_id = game_player_id

    @property
    def game_player_name(self):
        """Gets the game_player_name of this GameDetail.  # noqa: E501


        :return: The game_player_name of this GameDetail.  # noqa: E501
        :rtype: str
        """
        return self._game_player_name

    @game_player_name.setter
    def game_player_name(self, game_player_name):
        """Sets the game_player_name of this GameDetail.


        :param game_player_name: The game_player_name of this GameDetail.  # noqa: E501
        :type: str
        """

        self._game_player_name = game_player_name

    @property
    def game_profile_id(self):
        """Gets the game_profile_id of this GameDetail.  # noqa: E501

        Deprecated: no more in use  # noqa: E501

        :return: The game_profile_id of this GameDetail.  # noqa: E501
        :rtype: str
        """
        return self._game_profile_id

    @game_profile_id.setter
    def game_profile_id(self, game_profile_id):
        """Sets the game_profile_id of this GameDetail.

        Deprecated: no more in use  # noqa: E501

        :param game_profile_id: The game_profile_id of this GameDetail.  # noqa: E501
        :type: str
        """

        self._game_profile_id = game_profile_id

    @property
    def region(self):
        """Gets the region of this GameDetail.  # noqa: E501


        :return: The region of this GameDetail.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this GameDetail.


        :param region: The region of this GameDetail.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def regions(self):
        """Gets the regions of this GameDetail.  # noqa: E501

        Deprecated: no more in use  # noqa: E501

        :return: The regions of this GameDetail.  # noqa: E501
        :rtype: object
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this GameDetail.

        Deprecated: no more in use  # noqa: E501

        :param regions: The regions of this GameDetail.  # noqa: E501
        :type: object
        """

        self._regions = regions

    @property
    def skill_level(self):
        """Gets the skill_level of this GameDetail.  # noqa: E501


        :return: The skill_level of this GameDetail.  # noqa: E501
        :rtype: int
        """
        return self._skill_level

    @skill_level.setter
    def skill_level(self, skill_level):
        """Sets the skill_level of this GameDetail.


        :param skill_level: The skill_level of this GameDetail.  # noqa: E501
        :type: int
        """

        self._skill_level = skill_level

    @property
    def skill_level_label(self):
        """Gets the skill_level_label of this GameDetail.  # noqa: E501

        Deprecated: use SkillLevel instead  # noqa: E501

        :return: The skill_level_label of this GameDetail.  # noqa: E501
        :rtype: str
        """
        return self._skill_level_label

    @skill_level_label.setter
    def skill_level_label(self, skill_level_label):
        """Sets the skill_level_label of this GameDetail.

        Deprecated: use SkillLevel instead  # noqa: E501

        :param skill_level_label: The skill_level_label of this GameDetail.  # noqa: E501
        :type: str
        """

        self._skill_level_label = skill_level_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GameDetail):
            return True

        return self.to_dict() != other.to_dict()
