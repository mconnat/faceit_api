# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class PlayerInLeague(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'division_name': 'str',
        'division_tier': 'str',
        'division_type': 'str',
        'leaderboard_id': 'str',
        'points': 'int',
        'position': 'int'
    }

    attribute_map = {
        'division_name': 'division_name',
        'division_tier': 'division_tier',
        'division_type': 'division_type',
        'leaderboard_id': 'leaderboard_id',
        'points': 'points',
        'position': 'position'
    }

    def __init__(self, division_name=None, division_tier=None, division_type=None, leaderboard_id=None, points=None, position=None, _configuration=None):  # noqa: E501
        """PlayerInLeague - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._division_name = None
        self._division_tier = None
        self._division_type = None
        self._leaderboard_id = None
        self._points = None
        self._position = None
        self.discriminator = None

        if division_name is not None:
            self.division_name = division_name
        if division_tier is not None:
            self.division_tier = division_tier
        if division_type is not None:
            self.division_type = division_type
        if leaderboard_id is not None:
            self.leaderboard_id = leaderboard_id
        if points is not None:
            self.points = points
        if position is not None:
            self.position = position

    @property
    def division_name(self):
        """Gets the division_name of this PlayerInLeague.  # noqa: E501

        The division name that the player is in.  # noqa: E501

        :return: The division_name of this PlayerInLeague.  # noqa: E501
        :rtype: str
        """
        return self._division_name

    @division_name.setter
    def division_name(self, division_name):
        """Sets the division_name of this PlayerInLeague.

        The division name that the player is in.  # noqa: E501

        :param division_name: The division_name of this PlayerInLeague.  # noqa: E501
        :type: str
        """

        self._division_name = division_name

    @property
    def division_tier(self):
        """Gets the division_tier of this PlayerInLeague.  # noqa: E501

        The division tier that the player is in.  # noqa: E501

        :return: The division_tier of this PlayerInLeague.  # noqa: E501
        :rtype: str
        """
        return self._division_tier

    @division_tier.setter
    def division_tier(self, division_tier):
        """Sets the division_tier of this PlayerInLeague.

        The division tier that the player is in.  # noqa: E501

        :param division_tier: The division_tier of this PlayerInLeague.  # noqa: E501
        :type: str
        """

        self._division_tier = division_tier

    @property
    def division_type(self):
        """Gets the division_type of this PlayerInLeague.  # noqa: E501

        The division type that the player is in.  # noqa: E501

        :return: The division_type of this PlayerInLeague.  # noqa: E501
        :rtype: str
        """
        return self._division_type

    @division_type.setter
    def division_type(self, division_type):
        """Sets the division_type of this PlayerInLeague.

        The division type that the player is in.  # noqa: E501

        :param division_type: The division_type of this PlayerInLeague.  # noqa: E501
        :type: str
        """

        self._division_type = division_type

    @property
    def leaderboard_id(self):
        """Gets the leaderboard_id of this PlayerInLeague.  # noqa: E501

        The leaderboard id that the player is in.  # noqa: E501

        :return: The leaderboard_id of this PlayerInLeague.  # noqa: E501
        :rtype: str
        """
        return self._leaderboard_id

    @leaderboard_id.setter
    def leaderboard_id(self, leaderboard_id):
        """Sets the leaderboard_id of this PlayerInLeague.

        The leaderboard id that the player is in.  # noqa: E501

        :param leaderboard_id: The leaderboard_id of this PlayerInLeague.  # noqa: E501
        :type: str
        """

        self._leaderboard_id = leaderboard_id

    @property
    def points(self):
        """Gets the points of this PlayerInLeague.  # noqa: E501

        The points of the player in the leaderboard.  # noqa: E501

        :return: The points of this PlayerInLeague.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this PlayerInLeague.

        The points of the player in the leaderboard.  # noqa: E501

        :param points: The points of this PlayerInLeague.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def position(self):
        """Gets the position of this PlayerInLeague.  # noqa: E501

        The position of the player in the leaderboard.  # noqa: E501

        :return: The position of this PlayerInLeague.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PlayerInLeague.

        The position of the player in the leaderboard.  # noqa: E501

        :param position: The position of this PlayerInLeague.  # noqa: E501
        :type: int
        """

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerInLeague, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerInLeague):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlayerInLeague):
            return True

        return self.to_dict() != other.to_dict()
