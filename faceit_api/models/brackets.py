# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Brackets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'game': 'str',
        'matches': 'list[BracketsMatch]',
        'name': 'str',
        'rounds': 'list[BracketsRound]',
        'status': 'str'
    }

    attribute_map = {
        'game': 'game',
        'matches': 'matches',
        'name': 'name',
        'rounds': 'rounds',
        'status': 'status'
    }

    def __init__(self, game=None, matches=None, name=None, rounds=None, status=None, _configuration=None):  # noqa: E501
        """Brackets - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._game = None
        self._matches = None
        self._name = None
        self._rounds = None
        self._status = None
        self.discriminator = None

        if game is not None:
            self.game = game
        if matches is not None:
            self.matches = matches
        if name is not None:
            self.name = name
        if rounds is not None:
            self.rounds = rounds
        if status is not None:
            self.status = status

    @property
    def game(self):
        """Gets the game of this Brackets.  # noqa: E501


        :return: The game of this Brackets.  # noqa: E501
        :rtype: str
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this Brackets.


        :param game: The game of this Brackets.  # noqa: E501
        :type: str
        """

        self._game = game

    @property
    def matches(self):
        """Gets the matches of this Brackets.  # noqa: E501


        :return: The matches of this Brackets.  # noqa: E501
        :rtype: list[BracketsMatch]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this Brackets.


        :param matches: The matches of this Brackets.  # noqa: E501
        :type: list[BracketsMatch]
        """

        self._matches = matches

    @property
    def name(self):
        """Gets the name of this Brackets.  # noqa: E501


        :return: The name of this Brackets.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Brackets.


        :param name: The name of this Brackets.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rounds(self):
        """Gets the rounds of this Brackets.  # noqa: E501


        :return: The rounds of this Brackets.  # noqa: E501
        :rtype: list[BracketsRound]
        """
        return self._rounds

    @rounds.setter
    def rounds(self, rounds):
        """Sets the rounds of this Brackets.


        :param rounds: The rounds of this Brackets.  # noqa: E501
        :type: list[BracketsRound]
        """

        self._rounds = rounds

    @property
    def status(self):
        """Gets the status of this Brackets.  # noqa: E501


        :return: The status of this Brackets.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Brackets.


        :param status: The status of this Brackets.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Brackets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Brackets):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Brackets):
            return True

        return self.to_dict() != other.to_dict()
