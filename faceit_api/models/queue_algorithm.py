# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class QueueAlgorithm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'algorithm_id': 'str',
        'algorithm_input': 'list[str]',
        'algorithm_parameters': 'AlgorithmParameters',
        'geo_description': 'GeoDescription',
        'geo_label': 'GeoLabel',
        'id': 'str',
        'role_based_captain_pick': 'bool'
    }

    attribute_map = {
        'algorithm_id': 'algorithmId',
        'algorithm_input': 'algorithmInput',
        'algorithm_parameters': 'algorithmParameters',
        'geo_description': 'geoDescription',
        'geo_label': 'geoLabel',
        'id': 'id',
        'role_based_captain_pick': 'roleBasedCaptainPick'
    }

    def __init__(self, algorithm_id=None, algorithm_input=None, algorithm_parameters=None, geo_description=None, geo_label=None, id=None, role_based_captain_pick=None, _configuration=None):  # noqa: E501
        """QueueAlgorithm - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._algorithm_id = None
        self._algorithm_input = None
        self._algorithm_parameters = None
        self._geo_description = None
        self._geo_label = None
        self._id = None
        self._role_based_captain_pick = None
        self.discriminator = None

        if algorithm_id is not None:
            self.algorithm_id = algorithm_id
        if algorithm_input is not None:
            self.algorithm_input = algorithm_input
        if algorithm_parameters is not None:
            self.algorithm_parameters = algorithm_parameters
        if geo_description is not None:
            self.geo_description = geo_description
        if geo_label is not None:
            self.geo_label = geo_label
        if id is not None:
            self.id = id
        if role_based_captain_pick is not None:
            self.role_based_captain_pick = role_based_captain_pick

    @property
    def algorithm_id(self):
        """Gets the algorithm_id of this QueueAlgorithm.  # noqa: E501


        :return: The algorithm_id of this QueueAlgorithm.  # noqa: E501
        :rtype: str
        """
        return self._algorithm_id

    @algorithm_id.setter
    def algorithm_id(self, algorithm_id):
        """Sets the algorithm_id of this QueueAlgorithm.


        :param algorithm_id: The algorithm_id of this QueueAlgorithm.  # noqa: E501
        :type: str
        """

        self._algorithm_id = algorithm_id

    @property
    def algorithm_input(self):
        """Gets the algorithm_input of this QueueAlgorithm.  # noqa: E501


        :return: The algorithm_input of this QueueAlgorithm.  # noqa: E501
        :rtype: list[str]
        """
        return self._algorithm_input

    @algorithm_input.setter
    def algorithm_input(self, algorithm_input):
        """Sets the algorithm_input of this QueueAlgorithm.


        :param algorithm_input: The algorithm_input of this QueueAlgorithm.  # noqa: E501
        :type: list[str]
        """

        self._algorithm_input = algorithm_input

    @property
    def algorithm_parameters(self):
        """Gets the algorithm_parameters of this QueueAlgorithm.  # noqa: E501


        :return: The algorithm_parameters of this QueueAlgorithm.  # noqa: E501
        :rtype: AlgorithmParameters
        """
        return self._algorithm_parameters

    @algorithm_parameters.setter
    def algorithm_parameters(self, algorithm_parameters):
        """Sets the algorithm_parameters of this QueueAlgorithm.


        :param algorithm_parameters: The algorithm_parameters of this QueueAlgorithm.  # noqa: E501
        :type: AlgorithmParameters
        """

        self._algorithm_parameters = algorithm_parameters

    @property
    def geo_description(self):
        """Gets the geo_description of this QueueAlgorithm.  # noqa: E501


        :return: The geo_description of this QueueAlgorithm.  # noqa: E501
        :rtype: GeoDescription
        """
        return self._geo_description

    @geo_description.setter
    def geo_description(self, geo_description):
        """Sets the geo_description of this QueueAlgorithm.


        :param geo_description: The geo_description of this QueueAlgorithm.  # noqa: E501
        :type: GeoDescription
        """

        self._geo_description = geo_description

    @property
    def geo_label(self):
        """Gets the geo_label of this QueueAlgorithm.  # noqa: E501


        :return: The geo_label of this QueueAlgorithm.  # noqa: E501
        :rtype: GeoLabel
        """
        return self._geo_label

    @geo_label.setter
    def geo_label(self, geo_label):
        """Sets the geo_label of this QueueAlgorithm.


        :param geo_label: The geo_label of this QueueAlgorithm.  # noqa: E501
        :type: GeoLabel
        """

        self._geo_label = geo_label

    @property
    def id(self):
        """Gets the id of this QueueAlgorithm.  # noqa: E501


        :return: The id of this QueueAlgorithm.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueueAlgorithm.


        :param id: The id of this QueueAlgorithm.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def role_based_captain_pick(self):
        """Gets the role_based_captain_pick of this QueueAlgorithm.  # noqa: E501


        :return: The role_based_captain_pick of this QueueAlgorithm.  # noqa: E501
        :rtype: bool
        """
        return self._role_based_captain_pick

    @role_based_captain_pick.setter
    def role_based_captain_pick(self, role_based_captain_pick):
        """Sets the role_based_captain_pick of this QueueAlgorithm.


        :param role_based_captain_pick: The role_based_captain_pick of this QueueAlgorithm.  # noqa: E501
        :type: bool
        """

        self._role_based_captain_pick = role_based_captain_pick

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueueAlgorithm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueueAlgorithm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueueAlgorithm):
            return True

        return self.to_dict() != other.to_dict()
