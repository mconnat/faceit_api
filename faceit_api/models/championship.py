# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Championship(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anticheat_required': 'bool',
        'avatar': 'str',
        'background_image': 'str',
        'championship_id': 'str',
        'championship_start': 'int',
        'checkin_clear': 'int',
        'checkin_enabled': 'bool',
        'checkin_start': 'int',
        'cover_image': 'str',
        'current_subscriptions': 'int',
        'description': 'str',
        'faceit_url': 'str',
        'featured': 'bool',
        'full': 'bool',
        'game_data': 'Game',
        'game_id': 'str',
        'id': 'str',
        'join_checks': 'JoinCheck',
        'name': 'str',
        'organizer_data': 'Organizer',
        'organizer_id': 'str',
        'prizes': 'list[Prize]',
        'region': 'str',
        'rules_id': 'str',
        'schedule': 'dict(str, ChampionshipSchedule)',
        'screening': 'ChampionshipScreening',
        'seeding_strategy': 'str',
        'slots': 'int',
        'status': 'str',
        'stream': 'ChampionshipStream',
        'subscription_end': 'int',
        'subscription_start': 'int',
        'subscriptions_locked': 'bool',
        'substitution_configuration': 'SubstitutionConfiguration',
        'total_groups': 'int',
        'total_prizes': 'int',
        'total_rounds': 'int',
        'type': 'str'
    }

    attribute_map = {
        'anticheat_required': 'anticheat_required',
        'avatar': 'avatar',
        'background_image': 'background_image',
        'championship_id': 'championship_id',
        'championship_start': 'championship_start',
        'checkin_clear': 'checkin_clear',
        'checkin_enabled': 'checkin_enabled',
        'checkin_start': 'checkin_start',
        'cover_image': 'cover_image',
        'current_subscriptions': 'current_subscriptions',
        'description': 'description',
        'faceit_url': 'faceit_url',
        'featured': 'featured',
        'full': 'full',
        'game_data': 'game_data',
        'game_id': 'game_id',
        'id': 'id',
        'join_checks': 'join_checks',
        'name': 'name',
        'organizer_data': 'organizer_data',
        'organizer_id': 'organizer_id',
        'prizes': 'prizes',
        'region': 'region',
        'rules_id': 'rules_id',
        'schedule': 'schedule',
        'screening': 'screening',
        'seeding_strategy': 'seeding_strategy',
        'slots': 'slots',
        'status': 'status',
        'stream': 'stream',
        'subscription_end': 'subscription_end',
        'subscription_start': 'subscription_start',
        'subscriptions_locked': 'subscriptions_locked',
        'substitution_configuration': 'substitution_configuration',
        'total_groups': 'total_groups',
        'total_prizes': 'total_prizes',
        'total_rounds': 'total_rounds',
        'type': 'type'
    }

    def __init__(self, anticheat_required=None, avatar=None, background_image=None, championship_id=None, championship_start=None, checkin_clear=None, checkin_enabled=None, checkin_start=None, cover_image=None, current_subscriptions=None, description=None, faceit_url=None, featured=None, full=None, game_data=None, game_id=None, id=None, join_checks=None, name=None, organizer_data=None, organizer_id=None, prizes=None, region=None, rules_id=None, schedule=None, screening=None, seeding_strategy=None, slots=None, status=None, stream=None, subscription_end=None, subscription_start=None, subscriptions_locked=None, substitution_configuration=None, total_groups=None, total_prizes=None, total_rounds=None, type=None, _configuration=None):  # noqa: E501
        """Championship - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._anticheat_required = None
        self._avatar = None
        self._background_image = None
        self._championship_id = None
        self._championship_start = None
        self._checkin_clear = None
        self._checkin_enabled = None
        self._checkin_start = None
        self._cover_image = None
        self._current_subscriptions = None
        self._description = None
        self._faceit_url = None
        self._featured = None
        self._full = None
        self._game_data = None
        self._game_id = None
        self._id = None
        self._join_checks = None
        self._name = None
        self._organizer_data = None
        self._organizer_id = None
        self._prizes = None
        self._region = None
        self._rules_id = None
        self._schedule = None
        self._screening = None
        self._seeding_strategy = None
        self._slots = None
        self._status = None
        self._stream = None
        self._subscription_end = None
        self._subscription_start = None
        self._subscriptions_locked = None
        self._substitution_configuration = None
        self._total_groups = None
        self._total_prizes = None
        self._total_rounds = None
        self._type = None
        self.discriminator = None

        if anticheat_required is not None:
            self.anticheat_required = anticheat_required
        if avatar is not None:
            self.avatar = avatar
        if background_image is not None:
            self.background_image = background_image
        if championship_id is not None:
            self.championship_id = championship_id
        if championship_start is not None:
            self.championship_start = championship_start
        if checkin_clear is not None:
            self.checkin_clear = checkin_clear
        if checkin_enabled is not None:
            self.checkin_enabled = checkin_enabled
        if checkin_start is not None:
            self.checkin_start = checkin_start
        if cover_image is not None:
            self.cover_image = cover_image
        if current_subscriptions is not None:
            self.current_subscriptions = current_subscriptions
        if description is not None:
            self.description = description
        if faceit_url is not None:
            self.faceit_url = faceit_url
        if featured is not None:
            self.featured = featured
        if full is not None:
            self.full = full
        if game_data is not None:
            self.game_data = game_data
        if game_id is not None:
            self.game_id = game_id
        if id is not None:
            self.id = id
        if join_checks is not None:
            self.join_checks = join_checks
        if name is not None:
            self.name = name
        if organizer_data is not None:
            self.organizer_data = organizer_data
        if organizer_id is not None:
            self.organizer_id = organizer_id
        if prizes is not None:
            self.prizes = prizes
        if region is not None:
            self.region = region
        if rules_id is not None:
            self.rules_id = rules_id
        if schedule is not None:
            self.schedule = schedule
        if screening is not None:
            self.screening = screening
        if seeding_strategy is not None:
            self.seeding_strategy = seeding_strategy
        if slots is not None:
            self.slots = slots
        if status is not None:
            self.status = status
        if stream is not None:
            self.stream = stream
        if subscription_end is not None:
            self.subscription_end = subscription_end
        if subscription_start is not None:
            self.subscription_start = subscription_start
        if subscriptions_locked is not None:
            self.subscriptions_locked = subscriptions_locked
        if substitution_configuration is not None:
            self.substitution_configuration = substitution_configuration
        if total_groups is not None:
            self.total_groups = total_groups
        if total_prizes is not None:
            self.total_prizes = total_prizes
        if total_rounds is not None:
            self.total_rounds = total_rounds
        if type is not None:
            self.type = type

    @property
    def anticheat_required(self):
        """Gets the anticheat_required of this Championship.  # noqa: E501


        :return: The anticheat_required of this Championship.  # noqa: E501
        :rtype: bool
        """
        return self._anticheat_required

    @anticheat_required.setter
    def anticheat_required(self, anticheat_required):
        """Sets the anticheat_required of this Championship.


        :param anticheat_required: The anticheat_required of this Championship.  # noqa: E501
        :type: bool
        """

        self._anticheat_required = anticheat_required

    @property
    def avatar(self):
        """Gets the avatar of this Championship.  # noqa: E501


        :return: The avatar of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Championship.


        :param avatar: The avatar of this Championship.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def background_image(self):
        """Gets the background_image of this Championship.  # noqa: E501


        :return: The background_image of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._background_image

    @background_image.setter
    def background_image(self, background_image):
        """Sets the background_image of this Championship.


        :param background_image: The background_image of this Championship.  # noqa: E501
        :type: str
        """

        self._background_image = background_image

    @property
    def championship_id(self):
        """Gets the championship_id of this Championship.  # noqa: E501


        :return: The championship_id of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._championship_id

    @championship_id.setter
    def championship_id(self, championship_id):
        """Sets the championship_id of this Championship.


        :param championship_id: The championship_id of this Championship.  # noqa: E501
        :type: str
        """

        self._championship_id = championship_id

    @property
    def championship_start(self):
        """Gets the championship_start of this Championship.  # noqa: E501


        :return: The championship_start of this Championship.  # noqa: E501
        :rtype: int
        """
        return self._championship_start

    @championship_start.setter
    def championship_start(self, championship_start):
        """Sets the championship_start of this Championship.


        :param championship_start: The championship_start of this Championship.  # noqa: E501
        :type: int
        """

        self._championship_start = championship_start

    @property
    def checkin_clear(self):
        """Gets the checkin_clear of this Championship.  # noqa: E501


        :return: The checkin_clear of this Championship.  # noqa: E501
        :rtype: int
        """
        return self._checkin_clear

    @checkin_clear.setter
    def checkin_clear(self, checkin_clear):
        """Sets the checkin_clear of this Championship.


        :param checkin_clear: The checkin_clear of this Championship.  # noqa: E501
        :type: int
        """

        self._checkin_clear = checkin_clear

    @property
    def checkin_enabled(self):
        """Gets the checkin_enabled of this Championship.  # noqa: E501


        :return: The checkin_enabled of this Championship.  # noqa: E501
        :rtype: bool
        """
        return self._checkin_enabled

    @checkin_enabled.setter
    def checkin_enabled(self, checkin_enabled):
        """Sets the checkin_enabled of this Championship.


        :param checkin_enabled: The checkin_enabled of this Championship.  # noqa: E501
        :type: bool
        """

        self._checkin_enabled = checkin_enabled

    @property
    def checkin_start(self):
        """Gets the checkin_start of this Championship.  # noqa: E501


        :return: The checkin_start of this Championship.  # noqa: E501
        :rtype: int
        """
        return self._checkin_start

    @checkin_start.setter
    def checkin_start(self, checkin_start):
        """Sets the checkin_start of this Championship.


        :param checkin_start: The checkin_start of this Championship.  # noqa: E501
        :type: int
        """

        self._checkin_start = checkin_start

    @property
    def cover_image(self):
        """Gets the cover_image of this Championship.  # noqa: E501


        :return: The cover_image of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._cover_image

    @cover_image.setter
    def cover_image(self, cover_image):
        """Sets the cover_image of this Championship.


        :param cover_image: The cover_image of this Championship.  # noqa: E501
        :type: str
        """

        self._cover_image = cover_image

    @property
    def current_subscriptions(self):
        """Gets the current_subscriptions of this Championship.  # noqa: E501


        :return: The current_subscriptions of this Championship.  # noqa: E501
        :rtype: int
        """
        return self._current_subscriptions

    @current_subscriptions.setter
    def current_subscriptions(self, current_subscriptions):
        """Sets the current_subscriptions of this Championship.


        :param current_subscriptions: The current_subscriptions of this Championship.  # noqa: E501
        :type: int
        """

        self._current_subscriptions = current_subscriptions

    @property
    def description(self):
        """Gets the description of this Championship.  # noqa: E501


        :return: The description of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Championship.


        :param description: The description of this Championship.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def faceit_url(self):
        """Gets the faceit_url of this Championship.  # noqa: E501


        :return: The faceit_url of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._faceit_url

    @faceit_url.setter
    def faceit_url(self, faceit_url):
        """Sets the faceit_url of this Championship.


        :param faceit_url: The faceit_url of this Championship.  # noqa: E501
        :type: str
        """

        self._faceit_url = faceit_url

    @property
    def featured(self):
        """Gets the featured of this Championship.  # noqa: E501


        :return: The featured of this Championship.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this Championship.


        :param featured: The featured of this Championship.  # noqa: E501
        :type: bool
        """

        self._featured = featured

    @property
    def full(self):
        """Gets the full of this Championship.  # noqa: E501


        :return: The full of this Championship.  # noqa: E501
        :rtype: bool
        """
        return self._full

    @full.setter
    def full(self, full):
        """Sets the full of this Championship.


        :param full: The full of this Championship.  # noqa: E501
        :type: bool
        """

        self._full = full

    @property
    def game_data(self):
        """Gets the game_data of this Championship.  # noqa: E501


        :return: The game_data of this Championship.  # noqa: E501
        :rtype: Game
        """
        return self._game_data

    @game_data.setter
    def game_data(self, game_data):
        """Sets the game_data of this Championship.


        :param game_data: The game_data of this Championship.  # noqa: E501
        :type: Game
        """

        self._game_data = game_data

    @property
    def game_id(self):
        """Gets the game_id of this Championship.  # noqa: E501


        :return: The game_id of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this Championship.


        :param game_id: The game_id of this Championship.  # noqa: E501
        :type: str
        """

        self._game_id = game_id

    @property
    def id(self):
        """Gets the id of this Championship.  # noqa: E501

        Deprecated: use championship_id instead  # noqa: E501

        :return: The id of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Championship.

        Deprecated: use championship_id instead  # noqa: E501

        :param id: The id of this Championship.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def join_checks(self):
        """Gets the join_checks of this Championship.  # noqa: E501


        :return: The join_checks of this Championship.  # noqa: E501
        :rtype: JoinCheck
        """
        return self._join_checks

    @join_checks.setter
    def join_checks(self, join_checks):
        """Sets the join_checks of this Championship.


        :param join_checks: The join_checks of this Championship.  # noqa: E501
        :type: JoinCheck
        """

        self._join_checks = join_checks

    @property
    def name(self):
        """Gets the name of this Championship.  # noqa: E501


        :return: The name of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Championship.


        :param name: The name of this Championship.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organizer_data(self):
        """Gets the organizer_data of this Championship.  # noqa: E501


        :return: The organizer_data of this Championship.  # noqa: E501
        :rtype: Organizer
        """
        return self._organizer_data

    @organizer_data.setter
    def organizer_data(self, organizer_data):
        """Sets the organizer_data of this Championship.


        :param organizer_data: The organizer_data of this Championship.  # noqa: E501
        :type: Organizer
        """

        self._organizer_data = organizer_data

    @property
    def organizer_id(self):
        """Gets the organizer_id of this Championship.  # noqa: E501


        :return: The organizer_id of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._organizer_id

    @organizer_id.setter
    def organizer_id(self, organizer_id):
        """Sets the organizer_id of this Championship.


        :param organizer_id: The organizer_id of this Championship.  # noqa: E501
        :type: str
        """

        self._organizer_id = organizer_id

    @property
    def prizes(self):
        """Gets the prizes of this Championship.  # noqa: E501


        :return: The prizes of this Championship.  # noqa: E501
        :rtype: list[Prize]
        """
        return self._prizes

    @prizes.setter
    def prizes(self, prizes):
        """Sets the prizes of this Championship.


        :param prizes: The prizes of this Championship.  # noqa: E501
        :type: list[Prize]
        """

        self._prizes = prizes

    @property
    def region(self):
        """Gets the region of this Championship.  # noqa: E501


        :return: The region of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Championship.


        :param region: The region of this Championship.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def rules_id(self):
        """Gets the rules_id of this Championship.  # noqa: E501


        :return: The rules_id of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._rules_id

    @rules_id.setter
    def rules_id(self, rules_id):
        """Sets the rules_id of this Championship.


        :param rules_id: The rules_id of this Championship.  # noqa: E501
        :type: str
        """

        self._rules_id = rules_id

    @property
    def schedule(self):
        """Gets the schedule of this Championship.  # noqa: E501


        :return: The schedule of this Championship.  # noqa: E501
        :rtype: dict(str, ChampionshipSchedule)
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Championship.


        :param schedule: The schedule of this Championship.  # noqa: E501
        :type: dict(str, ChampionshipSchedule)
        """

        self._schedule = schedule

    @property
    def screening(self):
        """Gets the screening of this Championship.  # noqa: E501


        :return: The screening of this Championship.  # noqa: E501
        :rtype: ChampionshipScreening
        """
        return self._screening

    @screening.setter
    def screening(self, screening):
        """Sets the screening of this Championship.


        :param screening: The screening of this Championship.  # noqa: E501
        :type: ChampionshipScreening
        """

        self._screening = screening

    @property
    def seeding_strategy(self):
        """Gets the seeding_strategy of this Championship.  # noqa: E501


        :return: The seeding_strategy of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._seeding_strategy

    @seeding_strategy.setter
    def seeding_strategy(self, seeding_strategy):
        """Sets the seeding_strategy of this Championship.


        :param seeding_strategy: The seeding_strategy of this Championship.  # noqa: E501
        :type: str
        """

        self._seeding_strategy = seeding_strategy

    @property
    def slots(self):
        """Gets the slots of this Championship.  # noqa: E501


        :return: The slots of this Championship.  # noqa: E501
        :rtype: int
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this Championship.


        :param slots: The slots of this Championship.  # noqa: E501
        :type: int
        """

        self._slots = slots

    @property
    def status(self):
        """Gets the status of this Championship.  # noqa: E501


        :return: The status of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Championship.


        :param status: The status of this Championship.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def stream(self):
        """Gets the stream of this Championship.  # noqa: E501


        :return: The stream of this Championship.  # noqa: E501
        :rtype: ChampionshipStream
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this Championship.


        :param stream: The stream of this Championship.  # noqa: E501
        :type: ChampionshipStream
        """

        self._stream = stream

    @property
    def subscription_end(self):
        """Gets the subscription_end of this Championship.  # noqa: E501


        :return: The subscription_end of this Championship.  # noqa: E501
        :rtype: int
        """
        return self._subscription_end

    @subscription_end.setter
    def subscription_end(self, subscription_end):
        """Sets the subscription_end of this Championship.


        :param subscription_end: The subscription_end of this Championship.  # noqa: E501
        :type: int
        """

        self._subscription_end = subscription_end

    @property
    def subscription_start(self):
        """Gets the subscription_start of this Championship.  # noqa: E501


        :return: The subscription_start of this Championship.  # noqa: E501
        :rtype: int
        """
        return self._subscription_start

    @subscription_start.setter
    def subscription_start(self, subscription_start):
        """Sets the subscription_start of this Championship.


        :param subscription_start: The subscription_start of this Championship.  # noqa: E501
        :type: int
        """

        self._subscription_start = subscription_start

    @property
    def subscriptions_locked(self):
        """Gets the subscriptions_locked of this Championship.  # noqa: E501


        :return: The subscriptions_locked of this Championship.  # noqa: E501
        :rtype: bool
        """
        return self._subscriptions_locked

    @subscriptions_locked.setter
    def subscriptions_locked(self, subscriptions_locked):
        """Sets the subscriptions_locked of this Championship.


        :param subscriptions_locked: The subscriptions_locked of this Championship.  # noqa: E501
        :type: bool
        """

        self._subscriptions_locked = subscriptions_locked

    @property
    def substitution_configuration(self):
        """Gets the substitution_configuration of this Championship.  # noqa: E501


        :return: The substitution_configuration of this Championship.  # noqa: E501
        :rtype: SubstitutionConfiguration
        """
        return self._substitution_configuration

    @substitution_configuration.setter
    def substitution_configuration(self, substitution_configuration):
        """Sets the substitution_configuration of this Championship.


        :param substitution_configuration: The substitution_configuration of this Championship.  # noqa: E501
        :type: SubstitutionConfiguration
        """

        self._substitution_configuration = substitution_configuration

    @property
    def total_groups(self):
        """Gets the total_groups of this Championship.  # noqa: E501


        :return: The total_groups of this Championship.  # noqa: E501
        :rtype: int
        """
        return self._total_groups

    @total_groups.setter
    def total_groups(self, total_groups):
        """Sets the total_groups of this Championship.


        :param total_groups: The total_groups of this Championship.  # noqa: E501
        :type: int
        """

        self._total_groups = total_groups

    @property
    def total_prizes(self):
        """Gets the total_prizes of this Championship.  # noqa: E501


        :return: The total_prizes of this Championship.  # noqa: E501
        :rtype: int
        """
        return self._total_prizes

    @total_prizes.setter
    def total_prizes(self, total_prizes):
        """Sets the total_prizes of this Championship.


        :param total_prizes: The total_prizes of this Championship.  # noqa: E501
        :type: int
        """

        self._total_prizes = total_prizes

    @property
    def total_rounds(self):
        """Gets the total_rounds of this Championship.  # noqa: E501


        :return: The total_rounds of this Championship.  # noqa: E501
        :rtype: int
        """
        return self._total_rounds

    @total_rounds.setter
    def total_rounds(self, total_rounds):
        """Sets the total_rounds of this Championship.


        :param total_rounds: The total_rounds of this Championship.  # noqa: E501
        :type: int
        """

        self._total_rounds = total_rounds

    @property
    def type(self):
        """Gets the type of this Championship.  # noqa: E501


        :return: The type of this Championship.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Championship.


        :param type: The type of this Championship.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Championship, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Championship):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Championship):
            return True

        return self.to_dict() != other.to_dict()
