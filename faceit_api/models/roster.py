# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Roster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anticheat_required': 'bool',
        'avatar': 'str',
        'game_player_id': 'str',
        'game_player_name': 'str',
        'game_skill_level': 'int',
        'membership': 'str',
        'nickname': 'str',
        'player_id': 'str'
    }

    attribute_map = {
        'anticheat_required': 'anticheat_required',
        'avatar': 'avatar',
        'game_player_id': 'game_player_id',
        'game_player_name': 'game_player_name',
        'game_skill_level': 'game_skill_level',
        'membership': 'membership',
        'nickname': 'nickname',
        'player_id': 'player_id'
    }

    def __init__(self, anticheat_required=None, avatar=None, game_player_id=None, game_player_name=None, game_skill_level=None, membership=None, nickname=None, player_id=None, _configuration=None):  # noqa: E501
        """Roster - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._anticheat_required = None
        self._avatar = None
        self._game_player_id = None
        self._game_player_name = None
        self._game_skill_level = None
        self._membership = None
        self._nickname = None
        self._player_id = None
        self.discriminator = None

        if anticheat_required is not None:
            self.anticheat_required = anticheat_required
        if avatar is not None:
            self.avatar = avatar
        if game_player_id is not None:
            self.game_player_id = game_player_id
        if game_player_name is not None:
            self.game_player_name = game_player_name
        if game_skill_level is not None:
            self.game_skill_level = game_skill_level
        if membership is not None:
            self.membership = membership
        if nickname is not None:
            self.nickname = nickname
        if player_id is not None:
            self.player_id = player_id

    @property
    def anticheat_required(self):
        """Gets the anticheat_required of this Roster.  # noqa: E501


        :return: The anticheat_required of this Roster.  # noqa: E501
        :rtype: bool
        """
        return self._anticheat_required

    @anticheat_required.setter
    def anticheat_required(self, anticheat_required):
        """Sets the anticheat_required of this Roster.


        :param anticheat_required: The anticheat_required of this Roster.  # noqa: E501
        :type: bool
        """

        self._anticheat_required = anticheat_required

    @property
    def avatar(self):
        """Gets the avatar of this Roster.  # noqa: E501


        :return: The avatar of this Roster.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Roster.


        :param avatar: The avatar of this Roster.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def game_player_id(self):
        """Gets the game_player_id of this Roster.  # noqa: E501


        :return: The game_player_id of this Roster.  # noqa: E501
        :rtype: str
        """
        return self._game_player_id

    @game_player_id.setter
    def game_player_id(self, game_player_id):
        """Sets the game_player_id of this Roster.


        :param game_player_id: The game_player_id of this Roster.  # noqa: E501
        :type: str
        """

        self._game_player_id = game_player_id

    @property
    def game_player_name(self):
        """Gets the game_player_name of this Roster.  # noqa: E501


        :return: The game_player_name of this Roster.  # noqa: E501
        :rtype: str
        """
        return self._game_player_name

    @game_player_name.setter
    def game_player_name(self, game_player_name):
        """Sets the game_player_name of this Roster.


        :param game_player_name: The game_player_name of this Roster.  # noqa: E501
        :type: str
        """

        self._game_player_name = game_player_name

    @property
    def game_skill_level(self):
        """Gets the game_skill_level of this Roster.  # noqa: E501


        :return: The game_skill_level of this Roster.  # noqa: E501
        :rtype: int
        """
        return self._game_skill_level

    @game_skill_level.setter
    def game_skill_level(self, game_skill_level):
        """Sets the game_skill_level of this Roster.


        :param game_skill_level: The game_skill_level of this Roster.  # noqa: E501
        :type: int
        """

        self._game_skill_level = game_skill_level

    @property
    def membership(self):
        """Gets the membership of this Roster.  # noqa: E501


        :return: The membership of this Roster.  # noqa: E501
        :rtype: str
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this Roster.


        :param membership: The membership of this Roster.  # noqa: E501
        :type: str
        """

        self._membership = membership

    @property
    def nickname(self):
        """Gets the nickname of this Roster.  # noqa: E501


        :return: The nickname of this Roster.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this Roster.


        :param nickname: The nickname of this Roster.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def player_id(self):
        """Gets the player_id of this Roster.  # noqa: E501


        :return: The player_id of this Roster.  # noqa: E501
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this Roster.


        :param player_id: The player_id of this Roster.  # noqa: E501
        :type: str
        """

        self._player_id = player_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Roster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Roster):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Roster):
            return True

        return self.to_dict() != other.to_dict()
