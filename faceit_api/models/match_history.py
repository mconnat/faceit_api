# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class MatchHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'competition_id': 'str',
        'competition_name': 'str',
        'competition_type': 'str',
        'faceit_url': 'str',
        'finished_at': 'int',
        'game_id': 'str',
        'game_mode': 'str',
        'match_id': 'str',
        'match_type': 'str',
        'max_players': 'int',
        'organizer_id': 'str',
        'playing_players': 'list[str]',
        'region': 'str',
        'results': 'MatchResult',
        'started_at': 'int',
        'status': 'str',
        'teams': 'dict(str, HistoryFaction)',
        'teams_size': 'int'
    }

    attribute_map = {
        'competition_id': 'competition_id',
        'competition_name': 'competition_name',
        'competition_type': 'competition_type',
        'faceit_url': 'faceit_url',
        'finished_at': 'finished_at',
        'game_id': 'game_id',
        'game_mode': 'game_mode',
        'match_id': 'match_id',
        'match_type': 'match_type',
        'max_players': 'max_players',
        'organizer_id': 'organizer_id',
        'playing_players': 'playing_players',
        'region': 'region',
        'results': 'results',
        'started_at': 'started_at',
        'status': 'status',
        'teams': 'teams',
        'teams_size': 'teams_size'
    }

    def __init__(self, competition_id=None, competition_name=None, competition_type=None, faceit_url=None, finished_at=None, game_id=None, game_mode=None, match_id=None, match_type=None, max_players=None, organizer_id=None, playing_players=None, region=None, results=None, started_at=None, status=None, teams=None, teams_size=None, _configuration=None):  # noqa: E501
        """MatchHistory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._competition_id = None
        self._competition_name = None
        self._competition_type = None
        self._faceit_url = None
        self._finished_at = None
        self._game_id = None
        self._game_mode = None
        self._match_id = None
        self._match_type = None
        self._max_players = None
        self._organizer_id = None
        self._playing_players = None
        self._region = None
        self._results = None
        self._started_at = None
        self._status = None
        self._teams = None
        self._teams_size = None
        self.discriminator = None

        if competition_id is not None:
            self.competition_id = competition_id
        if competition_name is not None:
            self.competition_name = competition_name
        if competition_type is not None:
            self.competition_type = competition_type
        if faceit_url is not None:
            self.faceit_url = faceit_url
        if finished_at is not None:
            self.finished_at = finished_at
        if game_id is not None:
            self.game_id = game_id
        if game_mode is not None:
            self.game_mode = game_mode
        if match_id is not None:
            self.match_id = match_id
        if match_type is not None:
            self.match_type = match_type
        if max_players is not None:
            self.max_players = max_players
        if organizer_id is not None:
            self.organizer_id = organizer_id
        if playing_players is not None:
            self.playing_players = playing_players
        if region is not None:
            self.region = region
        if results is not None:
            self.results = results
        if started_at is not None:
            self.started_at = started_at
        if status is not None:
            self.status = status
        if teams is not None:
            self.teams = teams
        if teams_size is not None:
            self.teams_size = teams_size

    @property
    def competition_id(self):
        """Gets the competition_id of this MatchHistory.  # noqa: E501


        :return: The competition_id of this MatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._competition_id

    @competition_id.setter
    def competition_id(self, competition_id):
        """Sets the competition_id of this MatchHistory.


        :param competition_id: The competition_id of this MatchHistory.  # noqa: E501
        :type: str
        """

        self._competition_id = competition_id

    @property
    def competition_name(self):
        """Gets the competition_name of this MatchHistory.  # noqa: E501


        :return: The competition_name of this MatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._competition_name

    @competition_name.setter
    def competition_name(self, competition_name):
        """Sets the competition_name of this MatchHistory.


        :param competition_name: The competition_name of this MatchHistory.  # noqa: E501
        :type: str
        """

        self._competition_name = competition_name

    @property
    def competition_type(self):
        """Gets the competition_type of this MatchHistory.  # noqa: E501


        :return: The competition_type of this MatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._competition_type

    @competition_type.setter
    def competition_type(self, competition_type):
        """Sets the competition_type of this MatchHistory.


        :param competition_type: The competition_type of this MatchHistory.  # noqa: E501
        :type: str
        """

        self._competition_type = competition_type

    @property
    def faceit_url(self):
        """Gets the faceit_url of this MatchHistory.  # noqa: E501


        :return: The faceit_url of this MatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._faceit_url

    @faceit_url.setter
    def faceit_url(self, faceit_url):
        """Sets the faceit_url of this MatchHistory.


        :param faceit_url: The faceit_url of this MatchHistory.  # noqa: E501
        :type: str
        """

        self._faceit_url = faceit_url

    @property
    def finished_at(self):
        """Gets the finished_at of this MatchHistory.  # noqa: E501


        :return: The finished_at of this MatchHistory.  # noqa: E501
        :rtype: int
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this MatchHistory.


        :param finished_at: The finished_at of this MatchHistory.  # noqa: E501
        :type: int
        """

        self._finished_at = finished_at

    @property
    def game_id(self):
        """Gets the game_id of this MatchHistory.  # noqa: E501


        :return: The game_id of this MatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this MatchHistory.


        :param game_id: The game_id of this MatchHistory.  # noqa: E501
        :type: str
        """

        self._game_id = game_id

    @property
    def game_mode(self):
        """Gets the game_mode of this MatchHistory.  # noqa: E501


        :return: The game_mode of this MatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._game_mode

    @game_mode.setter
    def game_mode(self, game_mode):
        """Sets the game_mode of this MatchHistory.


        :param game_mode: The game_mode of this MatchHistory.  # noqa: E501
        :type: str
        """

        self._game_mode = game_mode

    @property
    def match_id(self):
        """Gets the match_id of this MatchHistory.  # noqa: E501


        :return: The match_id of this MatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this MatchHistory.


        :param match_id: The match_id of this MatchHistory.  # noqa: E501
        :type: str
        """

        self._match_id = match_id

    @property
    def match_type(self):
        """Gets the match_type of this MatchHistory.  # noqa: E501


        :return: The match_type of this MatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this MatchHistory.


        :param match_type: The match_type of this MatchHistory.  # noqa: E501
        :type: str
        """

        self._match_type = match_type

    @property
    def max_players(self):
        """Gets the max_players of this MatchHistory.  # noqa: E501


        :return: The max_players of this MatchHistory.  # noqa: E501
        :rtype: int
        """
        return self._max_players

    @max_players.setter
    def max_players(self, max_players):
        """Sets the max_players of this MatchHistory.


        :param max_players: The max_players of this MatchHistory.  # noqa: E501
        :type: int
        """

        self._max_players = max_players

    @property
    def organizer_id(self):
        """Gets the organizer_id of this MatchHistory.  # noqa: E501


        :return: The organizer_id of this MatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._organizer_id

    @organizer_id.setter
    def organizer_id(self, organizer_id):
        """Sets the organizer_id of this MatchHistory.


        :param organizer_id: The organizer_id of this MatchHistory.  # noqa: E501
        :type: str
        """

        self._organizer_id = organizer_id

    @property
    def playing_players(self):
        """Gets the playing_players of this MatchHistory.  # noqa: E501


        :return: The playing_players of this MatchHistory.  # noqa: E501
        :rtype: list[str]
        """
        return self._playing_players

    @playing_players.setter
    def playing_players(self, playing_players):
        """Sets the playing_players of this MatchHistory.


        :param playing_players: The playing_players of this MatchHistory.  # noqa: E501
        :type: list[str]
        """

        self._playing_players = playing_players

    @property
    def region(self):
        """Gets the region of this MatchHistory.  # noqa: E501


        :return: The region of this MatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this MatchHistory.


        :param region: The region of this MatchHistory.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def results(self):
        """Gets the results of this MatchHistory.  # noqa: E501


        :return: The results of this MatchHistory.  # noqa: E501
        :rtype: MatchResult
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this MatchHistory.


        :param results: The results of this MatchHistory.  # noqa: E501
        :type: MatchResult
        """

        self._results = results

    @property
    def started_at(self):
        """Gets the started_at of this MatchHistory.  # noqa: E501


        :return: The started_at of this MatchHistory.  # noqa: E501
        :rtype: int
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this MatchHistory.


        :param started_at: The started_at of this MatchHistory.  # noqa: E501
        :type: int
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this MatchHistory.  # noqa: E501


        :return: The status of this MatchHistory.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MatchHistory.


        :param status: The status of this MatchHistory.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def teams(self):
        """Gets the teams of this MatchHistory.  # noqa: E501


        :return: The teams of this MatchHistory.  # noqa: E501
        :rtype: dict(str, HistoryFaction)
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this MatchHistory.


        :param teams: The teams of this MatchHistory.  # noqa: E501
        :type: dict(str, HistoryFaction)
        """

        self._teams = teams

    @property
    def teams_size(self):
        """Gets the teams_size of this MatchHistory.  # noqa: E501


        :return: The teams_size of this MatchHistory.  # noqa: E501
        :rtype: int
        """
        return self._teams_size

    @teams_size.setter
    def teams_size(self, teams_size):
        """Sets the teams_size of this MatchHistory.


        :param teams_size: The teams_size of this MatchHistory.  # noqa: E501
        :type: int
        """

        self._teams_size = teams_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchHistory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MatchHistory):
            return True

        return self.to_dict() != other.to_dict()
