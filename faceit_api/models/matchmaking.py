# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Matchmaking(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'game': 'str',
        'icon': 'str',
        'id': 'str',
        'league_id': 'str',
        'long_description': 'str',
        'name': 'str',
        'queues': 'list[MatchmakingQueue]',
        'region': 'str',
        'short_description': 'str'
    }

    attribute_map = {
        'game': 'game',
        'icon': 'icon',
        'id': 'id',
        'league_id': 'league_id',
        'long_description': 'long_description',
        'name': 'name',
        'queues': 'queues',
        'region': 'region',
        'short_description': 'short_description'
    }

    def __init__(self, game=None, icon=None, id=None, league_id=None, long_description=None, name=None, queues=None, region=None, short_description=None, _configuration=None):  # noqa: E501
        """Matchmaking - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._game = None
        self._icon = None
        self._id = None
        self._league_id = None
        self._long_description = None
        self._name = None
        self._queues = None
        self._region = None
        self._short_description = None
        self.discriminator = None

        if game is not None:
            self.game = game
        if icon is not None:
            self.icon = icon
        if id is not None:
            self.id = id
        if league_id is not None:
            self.league_id = league_id
        if long_description is not None:
            self.long_description = long_description
        if name is not None:
            self.name = name
        if queues is not None:
            self.queues = queues
        if region is not None:
            self.region = region
        if short_description is not None:
            self.short_description = short_description

    @property
    def game(self):
        """Gets the game of this Matchmaking.  # noqa: E501


        :return: The game of this Matchmaking.  # noqa: E501
        :rtype: str
        """
        return self._game

    @game.setter
    def game(self, game):
        """Sets the game of this Matchmaking.


        :param game: The game of this Matchmaking.  # noqa: E501
        :type: str
        """

        self._game = game

    @property
    def icon(self):
        """Gets the icon of this Matchmaking.  # noqa: E501


        :return: The icon of this Matchmaking.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Matchmaking.


        :param icon: The icon of this Matchmaking.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def id(self):
        """Gets the id of this Matchmaking.  # noqa: E501


        :return: The id of this Matchmaking.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Matchmaking.


        :param id: The id of this Matchmaking.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def league_id(self):
        """Gets the league_id of this Matchmaking.  # noqa: E501


        :return: The league_id of this Matchmaking.  # noqa: E501
        :rtype: str
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this Matchmaking.


        :param league_id: The league_id of this Matchmaking.  # noqa: E501
        :type: str
        """

        self._league_id = league_id

    @property
    def long_description(self):
        """Gets the long_description of this Matchmaking.  # noqa: E501


        :return: The long_description of this Matchmaking.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this Matchmaking.


        :param long_description: The long_description of this Matchmaking.  # noqa: E501
        :type: str
        """

        self._long_description = long_description

    @property
    def name(self):
        """Gets the name of this Matchmaking.  # noqa: E501


        :return: The name of this Matchmaking.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Matchmaking.


        :param name: The name of this Matchmaking.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def queues(self):
        """Gets the queues of this Matchmaking.  # noqa: E501


        :return: The queues of this Matchmaking.  # noqa: E501
        :rtype: list[MatchmakingQueue]
        """
        return self._queues

    @queues.setter
    def queues(self, queues):
        """Sets the queues of this Matchmaking.


        :param queues: The queues of this Matchmaking.  # noqa: E501
        :type: list[MatchmakingQueue]
        """

        self._queues = queues

    @property
    def region(self):
        """Gets the region of this Matchmaking.  # noqa: E501


        :return: The region of this Matchmaking.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Matchmaking.


        :param region: The region of this Matchmaking.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def short_description(self):
        """Gets the short_description of this Matchmaking.  # noqa: E501


        :return: The short_description of this Matchmaking.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Matchmaking.


        :param short_description: The short_description of this Matchmaking.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Matchmaking, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Matchmaking):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Matchmaking):
            return True

        return self.to_dict() != other.to_dict()
