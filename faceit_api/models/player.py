# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Player(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activated_at': 'datetime',
        'avatar': 'str',
        'country': 'str',
        'cover_featured_image': 'str',
        'cover_image': 'str',
        'faceit_url': 'str',
        'friends_ids': 'list[str]',
        'games': 'dict(str, GameDetail)',
        'infractions': 'object',
        'membership_type': 'str',
        'memberships': 'list[str]',
        'new_steam_id': 'str',
        'nickname': 'str',
        'platforms': 'dict(str, str)',
        'player_id': 'str',
        'settings': 'UserSettings',
        'steam_id_64': 'str',
        'steam_nickname': 'str',
        'verified': 'bool'
    }

    attribute_map = {
        'activated_at': 'activated_at',
        'avatar': 'avatar',
        'country': 'country',
        'cover_featured_image': 'cover_featured_image',
        'cover_image': 'cover_image',
        'faceit_url': 'faceit_url',
        'friends_ids': 'friends_ids',
        'games': 'games',
        'infractions': 'infractions',
        'membership_type': 'membership_type',
        'memberships': 'memberships',
        'new_steam_id': 'new_steam_id',
        'nickname': 'nickname',
        'platforms': 'platforms',
        'player_id': 'player_id',
        'settings': 'settings',
        'steam_id_64': 'steam_id_64',
        'steam_nickname': 'steam_nickname',
        'verified': 'verified'
    }

    def __init__(self, activated_at=None, avatar=None, country=None, cover_featured_image=None, cover_image=None, faceit_url=None, friends_ids=None, games=None, infractions=None, membership_type=None, memberships=None, new_steam_id=None, nickname=None, platforms=None, player_id=None, settings=None, steam_id_64=None, steam_nickname=None, verified=None, _configuration=None):  # noqa: E501
        """Player - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._activated_at = None
        self._avatar = None
        self._country = None
        self._cover_featured_image = None
        self._cover_image = None
        self._faceit_url = None
        self._friends_ids = None
        self._games = None
        self._infractions = None
        self._membership_type = None
        self._memberships = None
        self._new_steam_id = None
        self._nickname = None
        self._platforms = None
        self._player_id = None
        self._settings = None
        self._steam_id_64 = None
        self._steam_nickname = None
        self._verified = None
        self.discriminator = None

        if activated_at is not None:
            self.activated_at = activated_at
        if avatar is not None:
            self.avatar = avatar
        if country is not None:
            self.country = country
        if cover_featured_image is not None:
            self.cover_featured_image = cover_featured_image
        if cover_image is not None:
            self.cover_image = cover_image
        if faceit_url is not None:
            self.faceit_url = faceit_url
        if friends_ids is not None:
            self.friends_ids = friends_ids
        if games is not None:
            self.games = games
        if infractions is not None:
            self.infractions = infractions
        if membership_type is not None:
            self.membership_type = membership_type
        if memberships is not None:
            self.memberships = memberships
        if new_steam_id is not None:
            self.new_steam_id = new_steam_id
        if nickname is not None:
            self.nickname = nickname
        if platforms is not None:
            self.platforms = platforms
        if player_id is not None:
            self.player_id = player_id
        if settings is not None:
            self.settings = settings
        if steam_id_64 is not None:
            self.steam_id_64 = steam_id_64
        if steam_nickname is not None:
            self.steam_nickname = steam_nickname
        if verified is not None:
            self.verified = verified

    @property
    def activated_at(self):
        """Gets the activated_at of this Player.  # noqa: E501


        :return: The activated_at of this Player.  # noqa: E501
        :rtype: datetime
        """
        return self._activated_at

    @activated_at.setter
    def activated_at(self, activated_at):
        """Sets the activated_at of this Player.


        :param activated_at: The activated_at of this Player.  # noqa: E501
        :type: datetime
        """

        self._activated_at = activated_at

    @property
    def avatar(self):
        """Gets the avatar of this Player.  # noqa: E501


        :return: The avatar of this Player.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Player.


        :param avatar: The avatar of this Player.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def country(self):
        """Gets the country of this Player.  # noqa: E501


        :return: The country of this Player.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Player.


        :param country: The country of this Player.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def cover_featured_image(self):
        """Gets the cover_featured_image of this Player.  # noqa: E501

        Deprecated: no more in use  # noqa: E501

        :return: The cover_featured_image of this Player.  # noqa: E501
        :rtype: str
        """
        return self._cover_featured_image

    @cover_featured_image.setter
    def cover_featured_image(self, cover_featured_image):
        """Sets the cover_featured_image of this Player.

        Deprecated: no more in use  # noqa: E501

        :param cover_featured_image: The cover_featured_image of this Player.  # noqa: E501
        :type: str
        """

        self._cover_featured_image = cover_featured_image

    @property
    def cover_image(self):
        """Gets the cover_image of this Player.  # noqa: E501


        :return: The cover_image of this Player.  # noqa: E501
        :rtype: str
        """
        return self._cover_image

    @cover_image.setter
    def cover_image(self, cover_image):
        """Sets the cover_image of this Player.


        :param cover_image: The cover_image of this Player.  # noqa: E501
        :type: str
        """

        self._cover_image = cover_image

    @property
    def faceit_url(self):
        """Gets the faceit_url of this Player.  # noqa: E501


        :return: The faceit_url of this Player.  # noqa: E501
        :rtype: str
        """
        return self._faceit_url

    @faceit_url.setter
    def faceit_url(self, faceit_url):
        """Sets the faceit_url of this Player.


        :param faceit_url: The faceit_url of this Player.  # noqa: E501
        :type: str
        """

        self._faceit_url = faceit_url

    @property
    def friends_ids(self):
        """Gets the friends_ids of this Player.  # noqa: E501


        :return: The friends_ids of this Player.  # noqa: E501
        :rtype: list[str]
        """
        return self._friends_ids

    @friends_ids.setter
    def friends_ids(self, friends_ids):
        """Sets the friends_ids of this Player.


        :param friends_ids: The friends_ids of this Player.  # noqa: E501
        :type: list[str]
        """

        self._friends_ids = friends_ids

    @property
    def games(self):
        """Gets the games of this Player.  # noqa: E501


        :return: The games of this Player.  # noqa: E501
        :rtype: dict(str, GameDetail)
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this Player.


        :param games: The games of this Player.  # noqa: E501
        :type: dict(str, GameDetail)
        """

        self._games = games

    @property
    def infractions(self):
        """Gets the infractions of this Player.  # noqa: E501

        Deprecated: no more in use  # noqa: E501

        :return: The infractions of this Player.  # noqa: E501
        :rtype: object
        """
        return self._infractions

    @infractions.setter
    def infractions(self, infractions):
        """Sets the infractions of this Player.

        Deprecated: no more in use  # noqa: E501

        :param infractions: The infractions of this Player.  # noqa: E501
        :type: object
        """

        self._infractions = infractions

    @property
    def membership_type(self):
        """Gets the membership_type of this Player.  # noqa: E501

        Deprecated: use memberships instead  # noqa: E501

        :return: The membership_type of this Player.  # noqa: E501
        :rtype: str
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this Player.

        Deprecated: use memberships instead  # noqa: E501

        :param membership_type: The membership_type of this Player.  # noqa: E501
        :type: str
        """

        self._membership_type = membership_type

    @property
    def memberships(self):
        """Gets the memberships of this Player.  # noqa: E501


        :return: The memberships of this Player.  # noqa: E501
        :rtype: list[str]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this Player.


        :param memberships: The memberships of this Player.  # noqa: E501
        :type: list[str]
        """

        self._memberships = memberships

    @property
    def new_steam_id(self):
        """Gets the new_steam_id of this Player.  # noqa: E501


        :return: The new_steam_id of this Player.  # noqa: E501
        :rtype: str
        """
        return self._new_steam_id

    @new_steam_id.setter
    def new_steam_id(self, new_steam_id):
        """Sets the new_steam_id of this Player.


        :param new_steam_id: The new_steam_id of this Player.  # noqa: E501
        :type: str
        """

        self._new_steam_id = new_steam_id

    @property
    def nickname(self):
        """Gets the nickname of this Player.  # noqa: E501


        :return: The nickname of this Player.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this Player.


        :param nickname: The nickname of this Player.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def platforms(self):
        """Gets the platforms of this Player.  # noqa: E501


        :return: The platforms of this Player.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this Player.


        :param platforms: The platforms of this Player.  # noqa: E501
        :type: dict(str, str)
        """

        self._platforms = platforms

    @property
    def player_id(self):
        """Gets the player_id of this Player.  # noqa: E501


        :return: The player_id of this Player.  # noqa: E501
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this Player.


        :param player_id: The player_id of this Player.  # noqa: E501
        :type: str
        """

        self._player_id = player_id

    @property
    def settings(self):
        """Gets the settings of this Player.  # noqa: E501


        :return: The settings of this Player.  # noqa: E501
        :rtype: UserSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Player.


        :param settings: The settings of this Player.  # noqa: E501
        :type: UserSettings
        """

        self._settings = settings

    @property
    def steam_id_64(self):
        """Gets the steam_id_64 of this Player.  # noqa: E501


        :return: The steam_id_64 of this Player.  # noqa: E501
        :rtype: str
        """
        return self._steam_id_64

    @steam_id_64.setter
    def steam_id_64(self, steam_id_64):
        """Sets the steam_id_64 of this Player.


        :param steam_id_64: The steam_id_64 of this Player.  # noqa: E501
        :type: str
        """

        self._steam_id_64 = steam_id_64

    @property
    def steam_nickname(self):
        """Gets the steam_nickname of this Player.  # noqa: E501


        :return: The steam_nickname of this Player.  # noqa: E501
        :rtype: str
        """
        return self._steam_nickname

    @steam_nickname.setter
    def steam_nickname(self, steam_nickname):
        """Sets the steam_nickname of this Player.


        :param steam_nickname: The steam_nickname of this Player.  # noqa: E501
        :type: str
        """

        self._steam_nickname = steam_nickname

    @property
    def verified(self):
        """Gets the verified of this Player.  # noqa: E501


        :return: The verified of this Player.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this Player.


        :param verified: The verified of this Player.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Player, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Player):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Player):
            return True

        return self.to_dict() != other.to_dict()
