# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class AccessMode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_volume': 'TypeBlock',
        'mount_volume': 'TypeMount',
        'scope': 'Scope',
        'sharing': 'SharingMode'
    }

    attribute_map = {
        'block_volume': 'BlockVolume',
        'mount_volume': 'MountVolume',
        'scope': 'Scope',
        'sharing': 'Sharing'
    }

    def __init__(self, block_volume=None, mount_volume=None, scope=None, sharing=None, _configuration=None):  # noqa: E501
        """AccessMode - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._block_volume = None
        self._mount_volume = None
        self._scope = None
        self._sharing = None
        self.discriminator = None

        if block_volume is not None:
            self.block_volume = block_volume
        if mount_volume is not None:
            self.mount_volume = mount_volume
        if scope is not None:
            self.scope = scope
        if sharing is not None:
            self.sharing = sharing

    @property
    def block_volume(self):
        """Gets the block_volume of this AccessMode.  # noqa: E501


        :return: The block_volume of this AccessMode.  # noqa: E501
        :rtype: TypeBlock
        """
        return self._block_volume

    @block_volume.setter
    def block_volume(self, block_volume):
        """Sets the block_volume of this AccessMode.


        :param block_volume: The block_volume of this AccessMode.  # noqa: E501
        :type: TypeBlock
        """

        self._block_volume = block_volume

    @property
    def mount_volume(self):
        """Gets the mount_volume of this AccessMode.  # noqa: E501


        :return: The mount_volume of this AccessMode.  # noqa: E501
        :rtype: TypeMount
        """
        return self._mount_volume

    @mount_volume.setter
    def mount_volume(self, mount_volume):
        """Sets the mount_volume of this AccessMode.


        :param mount_volume: The mount_volume of this AccessMode.  # noqa: E501
        :type: TypeMount
        """

        self._mount_volume = mount_volume

    @property
    def scope(self):
        """Gets the scope of this AccessMode.  # noqa: E501


        :return: The scope of this AccessMode.  # noqa: E501
        :rtype: Scope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AccessMode.


        :param scope: The scope of this AccessMode.  # noqa: E501
        :type: Scope
        """

        self._scope = scope

    @property
    def sharing(self):
        """Gets the sharing of this AccessMode.  # noqa: E501


        :return: The sharing of this AccessMode.  # noqa: E501
        :rtype: SharingMode
        """
        return self._sharing

    @sharing.setter
    def sharing(self, sharing):
        """Sets the sharing of this AccessMode.


        :param sharing: The sharing of this AccessMode.  # noqa: E501
        :type: SharingMode
        """

        self._sharing = sharing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessMode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessMode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccessMode):
            return True

        return self.to_dict() != other.to_dict()
