# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Organizer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avatar': 'str',
        'cover': 'str',
        'description': 'str',
        'facebook': 'str',
        'faceit_url': 'str',
        'followers_count': 'int',
        'name': 'str',
        'organizer_id': 'str',
        'twitch': 'str',
        'twitter': 'str',
        'type': 'str',
        'vk': 'str',
        'website': 'str',
        'youtube': 'str'
    }

    attribute_map = {
        'avatar': 'avatar',
        'cover': 'cover',
        'description': 'description',
        'facebook': 'facebook',
        'faceit_url': 'faceit_url',
        'followers_count': 'followers_count',
        'name': 'name',
        'organizer_id': 'organizer_id',
        'twitch': 'twitch',
        'twitter': 'twitter',
        'type': 'type',
        'vk': 'vk',
        'website': 'website',
        'youtube': 'youtube'
    }

    def __init__(self, avatar=None, cover=None, description=None, facebook=None, faceit_url=None, followers_count=None, name=None, organizer_id=None, twitch=None, twitter=None, type=None, vk=None, website=None, youtube=None, _configuration=None):  # noqa: E501
        """Organizer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._avatar = None
        self._cover = None
        self._description = None
        self._facebook = None
        self._faceit_url = None
        self._followers_count = None
        self._name = None
        self._organizer_id = None
        self._twitch = None
        self._twitter = None
        self._type = None
        self._vk = None
        self._website = None
        self._youtube = None
        self.discriminator = None

        if avatar is not None:
            self.avatar = avatar
        if cover is not None:
            self.cover = cover
        if description is not None:
            self.description = description
        if facebook is not None:
            self.facebook = facebook
        if faceit_url is not None:
            self.faceit_url = faceit_url
        if followers_count is not None:
            self.followers_count = followers_count
        if name is not None:
            self.name = name
        if organizer_id is not None:
            self.organizer_id = organizer_id
        if twitch is not None:
            self.twitch = twitch
        if twitter is not None:
            self.twitter = twitter
        if type is not None:
            self.type = type
        if vk is not None:
            self.vk = vk
        if website is not None:
            self.website = website
        if youtube is not None:
            self.youtube = youtube

    @property
    def avatar(self):
        """Gets the avatar of this Organizer.  # noqa: E501


        :return: The avatar of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Organizer.


        :param avatar: The avatar of this Organizer.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def cover(self):
        """Gets the cover of this Organizer.  # noqa: E501


        :return: The cover of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this Organizer.


        :param cover: The cover of this Organizer.  # noqa: E501
        :type: str
        """

        self._cover = cover

    @property
    def description(self):
        """Gets the description of this Organizer.  # noqa: E501


        :return: The description of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Organizer.


        :param description: The description of this Organizer.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def facebook(self):
        """Gets the facebook of this Organizer.  # noqa: E501


        :return: The facebook of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._facebook

    @facebook.setter
    def facebook(self, facebook):
        """Sets the facebook of this Organizer.


        :param facebook: The facebook of this Organizer.  # noqa: E501
        :type: str
        """

        self._facebook = facebook

    @property
    def faceit_url(self):
        """Gets the faceit_url of this Organizer.  # noqa: E501


        :return: The faceit_url of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._faceit_url

    @faceit_url.setter
    def faceit_url(self, faceit_url):
        """Sets the faceit_url of this Organizer.


        :param faceit_url: The faceit_url of this Organizer.  # noqa: E501
        :type: str
        """

        self._faceit_url = faceit_url

    @property
    def followers_count(self):
        """Gets the followers_count of this Organizer.  # noqa: E501


        :return: The followers_count of this Organizer.  # noqa: E501
        :rtype: int
        """
        return self._followers_count

    @followers_count.setter
    def followers_count(self, followers_count):
        """Sets the followers_count of this Organizer.


        :param followers_count: The followers_count of this Organizer.  # noqa: E501
        :type: int
        """

        self._followers_count = followers_count

    @property
    def name(self):
        """Gets the name of this Organizer.  # noqa: E501


        :return: The name of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organizer.


        :param name: The name of this Organizer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organizer_id(self):
        """Gets the organizer_id of this Organizer.  # noqa: E501


        :return: The organizer_id of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._organizer_id

    @organizer_id.setter
    def organizer_id(self, organizer_id):
        """Sets the organizer_id of this Organizer.


        :param organizer_id: The organizer_id of this Organizer.  # noqa: E501
        :type: str
        """

        self._organizer_id = organizer_id

    @property
    def twitch(self):
        """Gets the twitch of this Organizer.  # noqa: E501


        :return: The twitch of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._twitch

    @twitch.setter
    def twitch(self, twitch):
        """Sets the twitch of this Organizer.


        :param twitch: The twitch of this Organizer.  # noqa: E501
        :type: str
        """

        self._twitch = twitch

    @property
    def twitter(self):
        """Gets the twitter of this Organizer.  # noqa: E501


        :return: The twitter of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this Organizer.


        :param twitter: The twitter of this Organizer.  # noqa: E501
        :type: str
        """

        self._twitter = twitter

    @property
    def type(self):
        """Gets the type of this Organizer.  # noqa: E501


        :return: The type of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Organizer.


        :param type: The type of this Organizer.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vk(self):
        """Gets the vk of this Organizer.  # noqa: E501


        :return: The vk of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._vk

    @vk.setter
    def vk(self, vk):
        """Sets the vk of this Organizer.


        :param vk: The vk of this Organizer.  # noqa: E501
        :type: str
        """

        self._vk = vk

    @property
    def website(self):
        """Gets the website of this Organizer.  # noqa: E501


        :return: The website of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Organizer.


        :param website: The website of this Organizer.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def youtube(self):
        """Gets the youtube of this Organizer.  # noqa: E501


        :return: The youtube of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._youtube

    @youtube.setter
    def youtube(self, youtube):
        """Sets the youtube of this Organizer.


        :param youtube: The youtube of this Organizer.  # noqa: E501
        :type: str
        """

        self._youtube = youtube

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organizer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organizer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Organizer):
            return True

        return self.to_dict() != other.to_dict()
