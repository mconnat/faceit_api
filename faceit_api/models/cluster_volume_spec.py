# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class ClusterVolumeSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_mode': 'AccessMode',
        'accessibility_requirements': 'TopologyRequirement',
        'availability': 'Availability',
        'capacity_range': 'CapacityRange',
        'group': 'str',
        'secrets': 'list[Secret]'
    }

    attribute_map = {
        'access_mode': 'AccessMode',
        'accessibility_requirements': 'AccessibilityRequirements',
        'availability': 'Availability',
        'capacity_range': 'CapacityRange',
        'group': 'Group',
        'secrets': 'Secrets'
    }

    def __init__(self, access_mode=None, accessibility_requirements=None, availability=None, capacity_range=None, group=None, secrets=None, _configuration=None):  # noqa: E501
        """ClusterVolumeSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_mode = None
        self._accessibility_requirements = None
        self._availability = None
        self._capacity_range = None
        self._group = None
        self._secrets = None
        self.discriminator = None

        if access_mode is not None:
            self.access_mode = access_mode
        if accessibility_requirements is not None:
            self.accessibility_requirements = accessibility_requirements
        if availability is not None:
            self.availability = availability
        if capacity_range is not None:
            self.capacity_range = capacity_range
        if group is not None:
            self.group = group
        if secrets is not None:
            self.secrets = secrets

    @property
    def access_mode(self):
        """Gets the access_mode of this ClusterVolumeSpec.  # noqa: E501


        :return: The access_mode of this ClusterVolumeSpec.  # noqa: E501
        :rtype: AccessMode
        """
        return self._access_mode

    @access_mode.setter
    def access_mode(self, access_mode):
        """Sets the access_mode of this ClusterVolumeSpec.


        :param access_mode: The access_mode of this ClusterVolumeSpec.  # noqa: E501
        :type: AccessMode
        """

        self._access_mode = access_mode

    @property
    def accessibility_requirements(self):
        """Gets the accessibility_requirements of this ClusterVolumeSpec.  # noqa: E501


        :return: The accessibility_requirements of this ClusterVolumeSpec.  # noqa: E501
        :rtype: TopologyRequirement
        """
        return self._accessibility_requirements

    @accessibility_requirements.setter
    def accessibility_requirements(self, accessibility_requirements):
        """Sets the accessibility_requirements of this ClusterVolumeSpec.


        :param accessibility_requirements: The accessibility_requirements of this ClusterVolumeSpec.  # noqa: E501
        :type: TopologyRequirement
        """

        self._accessibility_requirements = accessibility_requirements

    @property
    def availability(self):
        """Gets the availability of this ClusterVolumeSpec.  # noqa: E501


        :return: The availability of this ClusterVolumeSpec.  # noqa: E501
        :rtype: Availability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this ClusterVolumeSpec.


        :param availability: The availability of this ClusterVolumeSpec.  # noqa: E501
        :type: Availability
        """

        self._availability = availability

    @property
    def capacity_range(self):
        """Gets the capacity_range of this ClusterVolumeSpec.  # noqa: E501


        :return: The capacity_range of this ClusterVolumeSpec.  # noqa: E501
        :rtype: CapacityRange
        """
        return self._capacity_range

    @capacity_range.setter
    def capacity_range(self, capacity_range):
        """Sets the capacity_range of this ClusterVolumeSpec.


        :param capacity_range: The capacity_range of this ClusterVolumeSpec.  # noqa: E501
        :type: CapacityRange
        """

        self._capacity_range = capacity_range

    @property
    def group(self):
        """Gets the group of this ClusterVolumeSpec.  # noqa: E501

        Group defines the volume group of this volume. Volumes belonging to the same group can be referred to by group name when creating Services. Referring to a volume by group instructs swarm to treat volumes in that group interchangeably for the purpose of scheduling. Volumes with an empty string for a group technically all belong to the same, emptystring group.  # noqa: E501

        :return: The group of this ClusterVolumeSpec.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ClusterVolumeSpec.

        Group defines the volume group of this volume. Volumes belonging to the same group can be referred to by group name when creating Services. Referring to a volume by group instructs swarm to treat volumes in that group interchangeably for the purpose of scheduling. Volumes with an empty string for a group technically all belong to the same, emptystring group.  # noqa: E501

        :param group: The group of this ClusterVolumeSpec.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def secrets(self):
        """Gets the secrets of this ClusterVolumeSpec.  # noqa: E501

        Secrets defines Swarm Secrets that are passed to the CSI storage plugin when operating on this volume.  # noqa: E501

        :return: The secrets of this ClusterVolumeSpec.  # noqa: E501
        :rtype: list[Secret]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this ClusterVolumeSpec.

        Secrets defines Swarm Secrets that are passed to the CSI storage plugin when operating on this volume.  # noqa: E501

        :param secrets: The secrets of this ClusterVolumeSpec.  # noqa: E501
        :type: list[Secret]
        """

        self._secrets = secrets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterVolumeSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterVolumeSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterVolumeSpec):
            return True

        return self.to_dict() != other.to_dict()
