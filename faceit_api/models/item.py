# coding: utf-8

"""
    Data API

    # This API provide access to FACEIT's data  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from faceit_api.configuration import Configuration


class Item(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'country_blacklist': 'list[str]',
        'country_whitelist': 'list[str]',
        'created_at': 'datetime',
        'created_by': 'str',
        'external_id': 'str',
        'games': 'list[str]',
        'id': 'str',
        'media': 'ItemMedia',
        'name': 'str',
        'new': 'bool',
        'order_type': 'str',
        'platforms': 'list[str]',
        'price': 'float',
        'published': 'bool',
        'quantity': 'int',
        'sizes': 'list[str]',
        'tags': 'list[str]',
        'unlimited': 'bool',
        'url': 'str'
    }

    attribute_map = {
        'category': 'category',
        'country_blacklist': 'country_blacklist',
        'country_whitelist': 'country_whitelist',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'external_id': 'external_id',
        'games': 'games',
        'id': 'id',
        'media': 'media',
        'name': 'name',
        'new': 'new',
        'order_type': 'order_type',
        'platforms': 'platforms',
        'price': 'price',
        'published': 'published',
        'quantity': 'quantity',
        'sizes': 'sizes',
        'tags': 'tags',
        'unlimited': 'unlimited',
        'url': 'url'
    }

    def __init__(self, category=None, country_blacklist=None, country_whitelist=None, created_at=None, created_by=None, external_id=None, games=None, id=None, media=None, name=None, new=None, order_type=None, platforms=None, price=None, published=None, quantity=None, sizes=None, tags=None, unlimited=None, url=None, _configuration=None):  # noqa: E501
        """Item - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._category = None
        self._country_blacklist = None
        self._country_whitelist = None
        self._created_at = None
        self._created_by = None
        self._external_id = None
        self._games = None
        self._id = None
        self._media = None
        self._name = None
        self._new = None
        self._order_type = None
        self._platforms = None
        self._price = None
        self._published = None
        self._quantity = None
        self._sizes = None
        self._tags = None
        self._unlimited = None
        self._url = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if country_blacklist is not None:
            self.country_blacklist = country_blacklist
        if country_whitelist is not None:
            self.country_whitelist = country_whitelist
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if external_id is not None:
            self.external_id = external_id
        if games is not None:
            self.games = games
        if id is not None:
            self.id = id
        if media is not None:
            self.media = media
        if name is not None:
            self.name = name
        if new is not None:
            self.new = new
        if order_type is not None:
            self.order_type = order_type
        if platforms is not None:
            self.platforms = platforms
        if price is not None:
            self.price = price
        if published is not None:
            self.published = published
        if quantity is not None:
            self.quantity = quantity
        if sizes is not None:
            self.sizes = sizes
        if tags is not None:
            self.tags = tags
        if unlimited is not None:
            self.unlimited = unlimited
        if url is not None:
            self.url = url

    @property
    def category(self):
        """Gets the category of this Item.  # noqa: E501


        :return: The category of this Item.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Item.


        :param category: The category of this Item.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def country_blacklist(self):
        """Gets the country_blacklist of this Item.  # noqa: E501


        :return: The country_blacklist of this Item.  # noqa: E501
        :rtype: list[str]
        """
        return self._country_blacklist

    @country_blacklist.setter
    def country_blacklist(self, country_blacklist):
        """Sets the country_blacklist of this Item.


        :param country_blacklist: The country_blacklist of this Item.  # noqa: E501
        :type: list[str]
        """

        self._country_blacklist = country_blacklist

    @property
    def country_whitelist(self):
        """Gets the country_whitelist of this Item.  # noqa: E501


        :return: The country_whitelist of this Item.  # noqa: E501
        :rtype: list[str]
        """
        return self._country_whitelist

    @country_whitelist.setter
    def country_whitelist(self, country_whitelist):
        """Sets the country_whitelist of this Item.


        :param country_whitelist: The country_whitelist of this Item.  # noqa: E501
        :type: list[str]
        """

        self._country_whitelist = country_whitelist

    @property
    def created_at(self):
        """Gets the created_at of this Item.  # noqa: E501


        :return: The created_at of this Item.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Item.


        :param created_at: The created_at of this Item.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Item.  # noqa: E501


        :return: The created_by of this Item.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Item.


        :param created_by: The created_by of this Item.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def external_id(self):
        """Gets the external_id of this Item.  # noqa: E501

        ExternalId refers to the ID of the item in a third-party shop  # noqa: E501

        :return: The external_id of this Item.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Item.

        ExternalId refers to the ID of the item in a third-party shop  # noqa: E501

        :param external_id: The external_id of this Item.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def games(self):
        """Gets the games of this Item.  # noqa: E501


        :return: The games of this Item.  # noqa: E501
        :rtype: list[str]
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this Item.


        :param games: The games of this Item.  # noqa: E501
        :type: list[str]
        """

        self._games = games

    @property
    def id(self):
        """Gets the id of this Item.  # noqa: E501


        :return: The id of this Item.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Item.


        :param id: The id of this Item.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def media(self):
        """Gets the media of this Item.  # noqa: E501


        :return: The media of this Item.  # noqa: E501
        :rtype: ItemMedia
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this Item.


        :param media: The media of this Item.  # noqa: E501
        :type: ItemMedia
        """

        self._media = media

    @property
    def name(self):
        """Gets the name of this Item.  # noqa: E501


        :return: The name of this Item.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Item.


        :param name: The name of this Item.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def new(self):
        """Gets the new of this Item.  # noqa: E501


        :return: The new of this Item.  # noqa: E501
        :rtype: bool
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this Item.


        :param new: The new of this Item.  # noqa: E501
        :type: bool
        """

        self._new = new

    @property
    def order_type(self):
        """Gets the order_type of this Item.  # noqa: E501


        :return: The order_type of this Item.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this Item.


        :param order_type: The order_type of this Item.  # noqa: E501
        :type: str
        """

        self._order_type = order_type

    @property
    def platforms(self):
        """Gets the platforms of this Item.  # noqa: E501


        :return: The platforms of this Item.  # noqa: E501
        :rtype: list[str]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this Item.


        :param platforms: The platforms of this Item.  # noqa: E501
        :type: list[str]
        """

        self._platforms = platforms

    @property
    def price(self):
        """Gets the price of this Item.  # noqa: E501


        :return: The price of this Item.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Item.


        :param price: The price of this Item.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def published(self):
        """Gets the published of this Item.  # noqa: E501


        :return: The published of this Item.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Item.


        :param published: The published of this Item.  # noqa: E501
        :type: bool
        """

        self._published = published

    @property
    def quantity(self):
        """Gets the quantity of this Item.  # noqa: E501


        :return: The quantity of this Item.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Item.


        :param quantity: The quantity of this Item.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def sizes(self):
        """Gets the sizes of this Item.  # noqa: E501


        :return: The sizes of this Item.  # noqa: E501
        :rtype: list[str]
        """
        return self._sizes

    @sizes.setter
    def sizes(self, sizes):
        """Sets the sizes of this Item.


        :param sizes: The sizes of this Item.  # noqa: E501
        :type: list[str]
        """

        self._sizes = sizes

    @property
    def tags(self):
        """Gets the tags of this Item.  # noqa: E501


        :return: The tags of this Item.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Item.


        :param tags: The tags of this Item.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def unlimited(self):
        """Gets the unlimited of this Item.  # noqa: E501


        :return: The unlimited of this Item.  # noqa: E501
        :rtype: bool
        """
        return self._unlimited

    @unlimited.setter
    def unlimited(self, unlimited):
        """Sets the unlimited of this Item.


        :param unlimited: The unlimited of this Item.  # noqa: E501
        :type: bool
        """

        self._unlimited = unlimited

    @property
    def url(self):
        """Gets the url of this Item.  # noqa: E501


        :return: The url of this Item.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Item.


        :param url: The url of this Item.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Item, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Item):
            return True

        return self.to_dict() != other.to_dict()
